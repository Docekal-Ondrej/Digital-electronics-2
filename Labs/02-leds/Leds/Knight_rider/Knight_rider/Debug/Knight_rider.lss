
Knight_rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068f  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036d  00000000  00000000  00001223  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ce  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c6  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 * Purpose:  Toggle two LEDs when a push button is pressed.
 * Returns:  none
 **********************************************************************/
int main(void)
{
    DDRB = DDRB | (1<<LED_5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4
    PORTB = PORTB & ~(1<<LED_5);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	8f 7d       	andi	r24, 0xDF	; 223
  8a:	85 b9       	out	0x05, r24	; 5

    DDRB = DDRB | (1<<LED_1);
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	84 b9       	out	0x04, r24	; 4
    PORTB = PORTB & ~(1<<LED_1);
  92:	85 b1       	in	r24, 0x05	; 5
  94:	8d 7f       	andi	r24, 0xFD	; 253
  96:	85 b9       	out	0x05, r24	; 5
	
	DDRB = DDRB | (1<<LED_2);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB & ~(1<<LED_2);
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8b 7f       	andi	r24, 0xFB	; 251
  a2:	85 b9       	out	0x05, r24	; 5
	
	DDRB = DDRB | (1<<LED_3);
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB & ~(1<<LED_3);
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	85 b9       	out	0x05, r24	; 5
			   
	DDRB = DDRB | (1<<LED_4);
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB & ~(1<<LED_4);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8f 7e       	andi	r24, 0xEF	; 239
  ba:	85 b9       	out	0x05, r24	; 5
    
    // Configure Push button at port D and enable internal pull-up resistor
    DDRD = DDRD & ~(1<<BTN);
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | (1<<BTN);
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	8b b9       	out	0x0b, r24	; 11
	
	int dir = 0;
	bool loop = false;
  c8:	20 e0       	ldi	r18, 0x00	; 0
    
    // Configure Push button at port D and enable internal pull-up resistor
    DDRD = DDRD & ~(1<<BTN);
	PORTD = PORTD | (1<<BTN);
	
	int dir = 0;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
	bool loop = false;
	while (1){
	if bit_is_clear(PIND, BTN)
  ce:	4c 99       	sbic	0x09, 4	; 9
  d0:	8a c0       	rjmp	.+276    	; 0x1e6 <main+0x166>
	{
		loop = true;
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	88 c0       	rjmp	.+272    	; 0x1e6 <main+0x166>
	}
	
    while (loop)
    {
		    if(dir == 1) {
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	09 f0       	breq	.+2      	; 0xdc <main+0x5c>
  da:	43 c0       	rjmp	.+134    	; 0x162 <main+0xe2>
		    PORTB = PORTB ^ (1<<LED_1);
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	98 27       	eor	r25, r24
  e2:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	3f ef       	ldi	r19, 0xFF	; 255
  e6:	49 e6       	ldi	r20, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	31 50       	subi	r19, 0x01	; 1
  ec:	40 40       	sbci	r20, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x6a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x74>
  f4:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_1);
  f6:	95 b1       	in	r25, 0x05	; 5
  f8:	89 27       	eor	r24, r25
  fa:	85 b9       	out	0x05, r24	; 5
		    PORTB = PORTB ^ (1<<LED_2);
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	98 27       	eor	r25, r24
 102:	95 b9       	out	0x05, r25	; 5
 104:	3f ef       	ldi	r19, 0xFF	; 255
 106:	49 e6       	ldi	r20, 0x69	; 105
 108:	98 e1       	ldi	r25, 0x18	; 24
 10a:	31 50       	subi	r19, 0x01	; 1
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x8a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x94>
 114:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_2);
 116:	95 b1       	in	r25, 0x05	; 5
 118:	89 27       	eor	r24, r25
 11a:	85 b9       	out	0x05, r24	; 5
		    PORTB = PORTB ^ (1<<LED_3);
 11c:	95 b1       	in	r25, 0x05	; 5
 11e:	88 e0       	ldi	r24, 0x08	; 8
 120:	98 27       	eor	r25, r24
 122:	95 b9       	out	0x05, r25	; 5
 124:	3f ef       	ldi	r19, 0xFF	; 255
 126:	49 e6       	ldi	r20, 0x69	; 105
 128:	98 e1       	ldi	r25, 0x18	; 24
 12a:	31 50       	subi	r19, 0x01	; 1
 12c:	40 40       	sbci	r20, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xaa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xb4>
 134:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_3);
 136:	95 b1       	in	r25, 0x05	; 5
 138:	89 27       	eor	r24, r25
 13a:	85 b9       	out	0x05, r24	; 5
		    PORTB = PORTB ^ (1<<LED_4);
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	98 27       	eor	r25, r24
 142:	95 b9       	out	0x05, r25	; 5
 144:	3f ef       	ldi	r19, 0xFF	; 255
 146:	49 e6       	ldi	r20, 0x69	; 105
 148:	98 e1       	ldi	r25, 0x18	; 24
 14a:	31 50       	subi	r19, 0x01	; 1
 14c:	40 40       	sbci	r20, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0xca>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0xd4>
 154:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_4);
 156:	95 b1       	in	r25, 0x05	; 5
 158:	89 27       	eor	r24, r25
 15a:	85 b9       	out	0x05, r24	; 5
			dir = 0;
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	42 c0       	rjmp	.+132    	; 0x1e6 <main+0x166>
			}
			else
			{
			PORTB = PORTB ^ (1<<LED_5);
 162:	95 b1       	in	r25, 0x05	; 5
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	98 27       	eor	r25, r24
 168:	95 b9       	out	0x05, r25	; 5
 16a:	3f ef       	ldi	r19, 0xFF	; 255
 16c:	49 e6       	ldi	r20, 0x69	; 105
 16e:	98 e1       	ldi	r25, 0x18	; 24
 170:	31 50       	subi	r19, 0x01	; 1
 172:	40 40       	sbci	r20, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0xf0>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xfa>
 17a:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_5);
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	89 27       	eor	r24, r25
 180:	85 b9       	out	0x05, r24	; 5
			PORTB = PORTB ^ (1<<LED_4);
 182:	95 b1       	in	r25, 0x05	; 5
 184:	80 e1       	ldi	r24, 0x10	; 16
 186:	98 27       	eor	r25, r24
 188:	95 b9       	out	0x05, r25	; 5
 18a:	3f ef       	ldi	r19, 0xFF	; 255
 18c:	49 e6       	ldi	r20, 0x69	; 105
 18e:	98 e1       	ldi	r25, 0x18	; 24
 190:	31 50       	subi	r19, 0x01	; 1
 192:	40 40       	sbci	r20, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x110>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x11a>
 19a:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_4);
 19c:	95 b1       	in	r25, 0x05	; 5
 19e:	89 27       	eor	r24, r25
 1a0:	85 b9       	out	0x05, r24	; 5
			PORTB = PORTB ^ (1<<LED_3);
 1a2:	95 b1       	in	r25, 0x05	; 5
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	98 27       	eor	r25, r24
 1a8:	95 b9       	out	0x05, r25	; 5
 1aa:	3f ef       	ldi	r19, 0xFF	; 255
 1ac:	49 e6       	ldi	r20, 0x69	; 105
 1ae:	98 e1       	ldi	r25, 0x18	; 24
 1b0:	31 50       	subi	r19, 0x01	; 1
 1b2:	40 40       	sbci	r20, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x130>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x13a>
 1ba:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_3);
 1bc:	95 b1       	in	r25, 0x05	; 5
 1be:	89 27       	eor	r24, r25
 1c0:	85 b9       	out	0x05, r24	; 5
			PORTB = PORTB ^ (1<<LED_2);
 1c2:	95 b1       	in	r25, 0x05	; 5
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	98 27       	eor	r25, r24
 1c8:	95 b9       	out	0x05, r25	; 5
 1ca:	3f ef       	ldi	r19, 0xFF	; 255
 1cc:	49 e6       	ldi	r20, 0x69	; 105
 1ce:	98 e1       	ldi	r25, 0x18	; 24
 1d0:	31 50       	subi	r19, 0x01	; 1
 1d2:	40 40       	sbci	r20, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x150>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x15a>
 1da:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_2);
 1dc:	95 b1       	in	r25, 0x05	; 5
 1de:	89 27       	eor	r24, r25
 1e0:	85 b9       	out	0x05, r24	; 5
			dir = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
	if bit_is_clear(PIND, BTN)
	{
		loop = true;
	}
	
    while (loop)
 1e6:	21 11       	cpse	r18, r1
 1e8:	76 cf       	rjmp	.-276    	; 0xd6 <main+0x56>
 1ea:	71 cf       	rjmp	.-286    	; 0xce <main+0x4e>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
