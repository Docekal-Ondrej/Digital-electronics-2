
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000592  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080012e  0080012e  00000654  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001549  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab0  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a40  00000000  00000000  000027bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058b  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b95  00000000  00000000  00003a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000045cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_18>
  4c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 37       	cpi	r26, 0x73	; 115
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 c7 02 	jmp	0x58e	; 0x58e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_gotoxy>:
 124:	61 11       	cpse	r22, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <lcd_gotoxy+0xc>
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 12e:	08 95       	ret
 130:	80 54       	subi	r24, 0x40	; 64
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clrscr>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_putc>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 146:	08 95       	ret

00000148 <lcd_puts>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <lcd_puts+0x1a>
 158:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_puts+0x10>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 16c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 170:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 172:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 174:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 176:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 178:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	99 ef       	ldi	r25, 0xF9	; 249
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x1c>
 184:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 186:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 188:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x30>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x40>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x4a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x50>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ba:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x62>
 1ca:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1d8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 21a:	8c e0       	ldi	r24, 0x0C	; 12
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 22a:	8e e0       	ldi	r24, 0x0E	; 14
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 23a:	80 e1       	ldi	r24, 0x10	; 16
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 242:	ec e7       	ldi	r30, 0x7C	; 124
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 24c:	80 81       	ld	r24, Z
 24e:	8f 77       	andi	r24, 0x7F	; 127
 250:	80 83       	st	Z, r24
    // Set input channel to ADC0
    ADMUX &= ~(1 << MUX3);
 252:	80 81       	ld	r24, Z
 254:	87 7f       	andi	r24, 0xF7	; 247
 256:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX2);
 258:	80 81       	ld	r24, Z
 25a:	8b 7f       	andi	r24, 0xFB	; 251
 25c:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX1);
 25e:	80 81       	ld	r24, Z
 260:	8d 7f       	andi	r24, 0xFD	; 253
 262:	80 83       	st	Z, r24
    ADMUX &= ~(1 << MUX0);
 264:	80 81       	ld	r24, Z
 266:	8e 7f       	andi	r24, 0xFE	; 254
 268:	80 83       	st	Z, r24
    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 26a:	ea e7       	ldi	r30, 0x7A	; 122
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 68       	ori	r24, 0x80	; 128
 272:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
    ADCSRA |= (1 << ADIE);
 274:	80 81       	ld	r24, Z
 276:	88 60       	ori	r24, 0x08	; 8
 278:	80 83       	st	Z, r24
    // Set clock prescaler to 128
    ADCSRA |= (1 << ADPS2);
 27a:	80 81       	ld	r24, Z
 27c:	84 60       	ori	r24, 0x04	; 4
 27e:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS1);
 280:	80 81       	ld	r24, Z
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS0);
 286:	80 81       	ld	r24, Z
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	80 83       	st	Z, r24
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    ADCSRB |= (1 << ADTS2);
 28c:	eb e7       	ldi	r30, 0x7B	; 123
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	84 60       	ori	r24, 0x04	; 4
 294:	80 83       	st	Z, r24
    ADCSRB |= (1 << ADTS1);
 296:	80 81       	ld	r24, Z
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	80 83       	st	Z, r24
    ADCSRB &= ~(1 << ADTS0);
 29c:	80 81       	ld	r24, Z
 29e:	8e 7f       	andi	r24, 0xFE	; 254
 2a0:	80 83       	st	Z, r24
    // Set prescaler to 262 ms and enable overflow interrupt
    TIM1_overflow_262ms();
 2a2:	e1 e8       	ldi	r30, 0x81	; 129
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	8b 7f       	andi	r24, 0xFB	; 251
 2aa:	80 83       	st	Z, r24
 2ac:	80 81       	ld	r24, Z
 2ae:	83 60       	ori	r24, 0x03	; 3
 2b0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 2b2:	ef e6       	ldi	r30, 0x6F	; 111
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	80 83       	st	Z, r24
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, 16000000));
 2bc:	87 e6       	ldi	r24, 0x67	; 103
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 55 02 	call	0x4aa	; 0x4aa <uart_init>
    // Enables interrupts by setting the global interrupt mask
    sei();
 2c4:	78 94       	sei
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <main+0xda>

000002c8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Use single conversion mode and start conversion four times
 *           per second.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	8f 93       	push	r24
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
    ADCSRA |= (1 << ADSC);
 2d8:	ea e7       	ldi	r30, 0x7A	; 122
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	80 83       	st	Z, r24

}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	4f 93       	push	r20
 306:	5f 93       	push	r21
 308:	6f 93       	push	r22
 30a:	7f 93       	push	r23
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	25 97       	sbiw	r28, 0x05	; 5
 322:	de bf       	out	0x3e, r29	; 62
 324:	cd bf       	out	0x3d, r28	; 61
    uint16_t value = 0;
    char lcd_string[] = "0000";
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	e8 e2       	ldi	r30, 0x28	; 40
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	de 01       	movw	r26, r28
 32e:	11 96       	adiw	r26, 0x01	; 1
 330:	01 90       	ld	r0, Z+
 332:	0d 92       	st	X+, r0
 334:	8a 95       	dec	r24
 336:	e1 f7       	brne	.-8      	; 0x330 <__vector_21+0x3e>

    value = ADC;                  // Copy ADC result to 16-bit variable
 338:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 33c:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	be 01       	movw	r22, r28
 344:	6f 5f       	subi	r22, 0xFF	; 255
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	c8 01       	movw	r24, r16
 34a:	0e 94 92 02 	call	0x524	; 0x524 <__itoa_ncheck>
    itoa(value, lcd_string, 10);  // Convert decimal value to string
    lcd_gotoxy(8,0);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	88 e0       	ldi	r24, 0x08	; 8
 352:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("    ");
 356:	83 e2       	ldi	r24, 0x23	; 35
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8,0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts(lcd_string);
 366:	ce 01       	movw	r24, r28
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    
    uart_puts("ADC val:");  
 36e:	82 e1       	ldi	r24, 0x12	; 18
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
    uart_putc('\r');
 376:	8d e0       	ldi	r24, 0x0D	; 13
 378:	0e 94 6e 02 	call	0x4dc	; 0x4dc <uart_putc>
    uart_puts(lcd_string);
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
    uart_putc('\r');
 384:	8d e0       	ldi	r24, 0x0D	; 13
 386:	0e 94 6e 02 	call	0x4dc	; 0x4dc <uart_putc>
    uart_puts("            ");
 38a:	8b e1       	ldi	r24, 0x1B	; 27
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
    uart_putc('\r');
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	0e 94 6e 02 	call	0x4dc	; 0x4dc <uart_putc>
 398:	40 e1       	ldi	r20, 0x10	; 16
 39a:	be 01       	movw	r22, r28
 39c:	6f 5f       	subi	r22, 0xFF	; 255
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	c8 01       	movw	r24, r16
 3a2:	0e 94 92 02 	call	0x524	; 0x524 <__itoa_ncheck>

    
    itoa(value, lcd_string, 16);
    lcd_gotoxy(13,0);
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	8d e0       	ldi	r24, 0x0D	; 13
 3aa:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("   ");
 3ae:	84 e2       	ldi	r24, 0x24	; 36
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(13,0);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	8d e0       	ldi	r24, 0x0D	; 13
 3ba:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts(lcd_string);
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	bf 91       	pop	r27
 3da:	af 91       	pop	r26
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	7f 91       	pop	r23
 3e2:	6f 91       	pop	r22
 3e4:	5f 91       	pop	r21
 3e6:	4f 91       	pop	r20
 3e8:	3f 91       	pop	r19
 3ea:	2f 91       	pop	r18
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
 40e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 412:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 416:	8c 71       	andi	r24, 0x1C	; 28
 418:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <UART_RxHead>
 41c:	ef 5f       	subi	r30, 0xFF	; 255
 41e:	ef 71       	andi	r30, 0x1F	; 31
 420:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <UART_RxTail>
 424:	e9 17       	cp	r30, r25
 426:	39 f0       	breq	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 428:	e0 93 30 01 	sts	0x0130, r30	; 0x800130 <UART_RxHead>
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	ed 5c       	subi	r30, 0xCD	; 205
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	20 83       	st	Z, r18
 434:	01 c0       	rjmp	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
 43c:	89 2b       	or	r24, r25
 43e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__vector_19>:
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
 468:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <UART_TxHead>
 46c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <UART_TxTail>
 470:	98 17       	cp	r25, r24
 472:	69 f0       	breq	.+26     	; 0x48e <__vector_19+0x38>
 474:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <UART_TxTail>
 478:	ef 5f       	subi	r30, 0xFF	; 255
 47a:	ef 71       	andi	r30, 0x1F	; 31
 47c:	e0 93 31 01 	sts	0x0131, r30	; 0x800131 <UART_TxTail>
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	ed 5a       	subi	r30, 0xAD	; 173
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	80 81       	ld	r24, Z
 488:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 48c:	05 c0       	rjmp	.+10     	; 0x498 <__vector_19+0x42>
 48e:	e1 ec       	ldi	r30, 0xC1	; 193
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	8f 7d       	andi	r24, 0xDF	; 223
 496:	80 83       	st	Z, r24
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <uart_init>:
 4aa:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <UART_TxHead>
 4ae:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <UART_TxTail>
 4b2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <UART_RxHead>
 4b6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <UART_RxTail>
 4ba:	99 23       	and	r25, r25
 4bc:	1c f4       	brge	.+6      	; 0x4c4 <uart_init+0x1a>
 4be:	22 e0       	ldi	r18, 0x02	; 2
 4c0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4c4:	90 78       	andi	r25, 0x80	; 128
 4c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 4ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 4ce:	88 e9       	ldi	r24, 0x98	; 152
 4d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 4da:	08 95       	ret

000004dc <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 4dc:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <UART_TxHead>
 4e0:	2f 5f       	subi	r18, 0xFF	; 255
 4e2:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 4e4:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <UART_TxTail>
 4e8:	29 17       	cp	r18, r25
 4ea:	e1 f3       	breq	.-8      	; 0x4e4 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 4ec:	e2 2f       	mov	r30, r18
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	ed 5a       	subi	r30, 0xAD	; 173
 4f2:	fe 4f       	sbci	r31, 0xFE	; 254
 4f4:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 4f6:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 4fa:	e1 ec       	ldi	r30, 0xC1	; 193
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	80 62       	ori	r24, 0x20	; 32
 502:	80 83       	st	Z, r24
 504:	08 95       	ret

00000506 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
    while (*s)
 50c:	88 81       	ld	r24, Y
 50e:	88 23       	and	r24, r24
 510:	31 f0       	breq	.+12     	; 0x51e <uart_puts+0x18>
 512:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 514:	0e 94 6e 02 	call	0x4dc	; 0x4dc <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 518:	89 91       	ld	r24, Y+
 51a:	81 11       	cpse	r24, r1
 51c:	fb cf       	rjmp	.-10     	; 0x514 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <__itoa_ncheck>:
 524:	bb 27       	eor	r27, r27
 526:	4a 30       	cpi	r20, 0x0A	; 10
 528:	31 f4       	brne	.+12     	; 0x536 <__itoa_ncheck+0x12>
 52a:	99 23       	and	r25, r25
 52c:	22 f4       	brpl	.+8      	; 0x536 <__itoa_ncheck+0x12>
 52e:	bd e2       	ldi	r27, 0x2D	; 45
 530:	90 95       	com	r25
 532:	81 95       	neg	r24
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__utoa_common>

0000053a <__utoa_ncheck>:
 53a:	bb 27       	eor	r27, r27

0000053c <__utoa_common>:
 53c:	fb 01       	movw	r30, r22
 53e:	55 27       	eor	r21, r21
 540:	aa 27       	eor	r26, r26
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	aa 1f       	adc	r26, r26
 548:	a4 17       	cp	r26, r20
 54a:	10 f0       	brcs	.+4      	; 0x550 <__utoa_common+0x14>
 54c:	a4 1b       	sub	r26, r20
 54e:	83 95       	inc	r24
 550:	50 51       	subi	r21, 0x10	; 16
 552:	b9 f7       	brne	.-18     	; 0x542 <__utoa_common+0x6>
 554:	a0 5d       	subi	r26, 0xD0	; 208
 556:	aa 33       	cpi	r26, 0x3A	; 58
 558:	08 f0       	brcs	.+2      	; 0x55c <__utoa_common+0x20>
 55a:	a9 5d       	subi	r26, 0xD9	; 217
 55c:	a1 93       	st	Z+, r26
 55e:	00 97       	sbiw	r24, 0x00	; 0
 560:	79 f7       	brne	.-34     	; 0x540 <__utoa_common+0x4>
 562:	b1 11       	cpse	r27, r1
 564:	b1 93       	st	Z+, r27
 566:	11 92       	st	Z+, r1
 568:	cb 01       	movw	r24, r22
 56a:	0c 94 b7 02 	jmp	0x56e	; 0x56e <strrev>

0000056e <strrev>:
 56e:	dc 01       	movw	r26, r24
 570:	fc 01       	movw	r30, r24
 572:	67 2f       	mov	r22, r23
 574:	71 91       	ld	r23, Z+
 576:	77 23       	and	r23, r23
 578:	e1 f7       	brne	.-8      	; 0x572 <strrev+0x4>
 57a:	32 97       	sbiw	r30, 0x02	; 2
 57c:	04 c0       	rjmp	.+8      	; 0x586 <strrev+0x18>
 57e:	7c 91       	ld	r23, X
 580:	6d 93       	st	X+, r22
 582:	70 83       	st	Z, r23
 584:	62 91       	ld	r22, -Z
 586:	ae 17       	cp	r26, r30
 588:	bf 07       	cpc	r27, r31
 58a:	c8 f3       	brcs	.-14     	; 0x57e <strrev+0x10>
 58c:	08 95       	ret

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
