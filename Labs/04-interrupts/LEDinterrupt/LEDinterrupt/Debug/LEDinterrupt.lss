
LEDinterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad6  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d6  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00001e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_toggle>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_toggle+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_toggle+0xa>
  ea:	24 27       	eor	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  f0:	65 e0       	ldi	r22, 0x05	; 5
  f2:	84 e2       	ldi	r24, 0x24	; 36
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D1);
  fa:	65 e0       	ldi	r22, 0x05	; 5
  fc:	85 e2       	ldi	r24, 0x25	; 37
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 104:	e1 e8       	ldi	r30, 0x81	; 129
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	80 83       	st	Z, r24
 10e:	80 81       	ld	r24, Z
 110:	83 60       	ori	r24, 0x03	; 3
 112:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 114:	ef e6       	ldi	r30, 0x6F	; 111
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 11e:	78 94       	sei
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0x30>

00000122 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
    static uint16_t i=0;
    static int8_t dir=1;
    if(i == 3){
 144:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 148:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	91 05       	cpc	r25, r1
 150:	69 f4       	brne	.+26     	; 0x16c <__vector_13+0x4a>
        i=0;
 152:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 156:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
        dir = -dir;
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15e:	81 95       	neg	r24
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        }else{
        i++;
        }
    if(dir == 1)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	09 f0       	breq	.+2      	; 0x16a <__vector_13+0x48>
 168:	64 c0       	rjmp	.+200    	; 0x232 <__vector_13+0x110>
 16a:	13 c0       	rjmp	.+38     	; 0x192 <__vector_13+0x70>
    static int8_t dir=1;
    if(i == 3){
        i=0;
        dir = -dir;
        }else{
        i++;
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 172:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
        }
    if(dir == 1)
 176:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 17a:	21 30       	cpi	r18, 0x01	; 1
 17c:	89 f5       	brne	.+98     	; 0x1e0 <__vector_13+0xbe>
    {
        switch(i){
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 05       	cpc	r25, r1
 182:	69 f0       	breq	.+26     	; 0x19e <__vector_13+0x7c>
 184:	30 f0       	brcs	.+12     	; 0x192 <__vector_13+0x70>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	91 05       	cpc	r25, r1
 18a:	a1 f0       	breq	.+40     	; 0x1b4 <__vector_13+0x92>
 18c:	03 97       	sbiw	r24, 0x03	; 3
 18e:	e9 f0       	breq	.+58     	; 0x1ca <__vector_13+0xa8>
 190:	5a c0       	rjmp	.+180    	; 0x246 <__vector_13+0x124>
        case 0:
        GPIO_toggle(&DDRB, LED_D1);
 192:	65 e0       	ldi	r22, 0x05	; 5
 194:	84 e2       	ldi	r24, 0x24	; 36
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
        break;
 19c:	54 c0       	rjmp	.+168    	; 0x246 <__vector_13+0x124>
        case 1:
        GPIO_toggle(&DDRB, LED_D2);
 19e:	64 e0       	ldi	r22, 0x04	; 4
 1a0:	84 e2       	ldi	r24, 0x24	; 36
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
        GPIO_toggle(&DDRB, LED_D1);
 1a8:	65 e0       	ldi	r22, 0x05	; 5
 1aa:	84 e2       	ldi	r24, 0x24	; 36
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
        break;
 1b2:	49 c0       	rjmp	.+146    	; 0x246 <__vector_13+0x124>
        case 2:
        GPIO_toggle(&DDRB, LED_D3);
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	84 e2       	ldi	r24, 0x24	; 36
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
        GPIO_toggle(&DDRB, LED_D2);
 1be:	64 e0       	ldi	r22, 0x04	; 4
 1c0:	84 e2       	ldi	r24, 0x24	; 36
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
        break;
 1c8:	3e c0       	rjmp	.+124    	; 0x246 <__vector_13+0x124>
        case 3:
        GPIO_toggle(&DDRB, LED_D4);
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	84 e2       	ldi	r24, 0x24	; 36
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
        GPIO_toggle(&DDRB, LED_D3);
 1d4:	63 e0       	ldi	r22, 0x03	; 3
 1d6:	84 e2       	ldi	r24, 0x24	; 36
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
        break;
 1de:	33 c0       	rjmp	.+102    	; 0x246 <__vector_13+0x124>
        }
    }   
    else
    {
        switch(i){
 1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	91 05       	cpc	r25, r1
 1ec:	b9 f0       	breq	.+46     	; 0x21c <__vector_13+0xfa>
 1ee:	08 f1       	brcs	.+66     	; 0x232 <__vector_13+0x110>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	91 05       	cpc	r25, r1
 1f4:	41 f0       	breq	.+16     	; 0x206 <__vector_13+0xe4>
 1f6:	03 97       	sbiw	r24, 0x03	; 3
 1f8:	31 f5       	brne	.+76     	; 0x246 <__vector_13+0x124>
            case 3:
            GPIO_toggle(&DDRB, LED_D1);
 1fa:	65 e0       	ldi	r22, 0x05	; 5
 1fc:	84 e2       	ldi	r24, 0x24	; 36
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
            break;
 204:	20 c0       	rjmp	.+64     	; 0x246 <__vector_13+0x124>
            case 2:
            GPIO_toggle(&DDRB, LED_D2);
 206:	64 e0       	ldi	r22, 0x04	; 4
 208:	84 e2       	ldi	r24, 0x24	; 36
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
            GPIO_toggle(&DDRB, LED_D1);
 210:	65 e0       	ldi	r22, 0x05	; 5
 212:	84 e2       	ldi	r24, 0x24	; 36
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
            break;
 21a:	15 c0       	rjmp	.+42     	; 0x246 <__vector_13+0x124>
            case 1:
            GPIO_toggle(&DDRB, LED_D3);
 21c:	63 e0       	ldi	r22, 0x03	; 3
 21e:	84 e2       	ldi	r24, 0x24	; 36
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
            GPIO_toggle(&DDRB, LED_D2);
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	84 e2       	ldi	r24, 0x24	; 36
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
            break;
 230:	0a c0       	rjmp	.+20     	; 0x246 <__vector_13+0x124>
            case 0:
            GPIO_toggle(&DDRB, LED_D4);
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	84 e2       	ldi	r24, 0x24	; 36
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
            GPIO_toggle(&DDRB, LED_D3);
 23c:	63 e0       	ldi	r22, 0x03	; 3
 23e:	84 e2       	ldi	r24, 0x24	; 36
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>
            break;
        }
    }
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
