
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000b1a  00000bae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  00000bbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3b  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c3  00000000  00000000  00001c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000622  00000000  00000000  000024e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000505  00000000  00000000  000031aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000036af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_13>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_16>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <modf+0x1e>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	ea e1       	ldi	r30, 0x1A	; 26
  fe:	fb e0       	ldi	r31, 0x0B	; 11
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	ae 30       	cpi	r26, 0x0E	; 14
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	ae e0       	ldi	r26, 0x0E	; 14
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a0 31       	cpi	r26, 0x10	; 16
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 b9 00 	call	0x172	; 0x172 <main>
 120:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
 128:	fc 01       	movw	r30, r24
 12a:	40 81       	ld	r20, Z
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_config_output+0xe>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_config_output+0xa>
 13a:	24 2b       	or	r18, r20
 13c:	20 83       	st	Z, r18
 13e:	08 95       	ret

00000140 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
 140:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
 142:	90 81       	ld	r25, Z
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <GPIO_write_low+0xe>
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <GPIO_write_low+0xa>
 152:	20 95       	com	r18
 154:	29 23       	and	r18, r25
 156:	20 83       	st	Z, r18
 158:	08 95       	ret

0000015a <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
 15a:	fc 01       	movw	r30, r24
 15c:	40 81       	ld	r20, Z
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <GPIO_write_high+0xe>
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <GPIO_write_high+0xa>
 16c:	24 2b       	or	r18, r20
 16e:	20 83       	st	Z, r18
 170:	08 95       	ret

00000172 <main>:
 **********************************************************************/
int main(void)
{

    // Configure SSD signals
    SEG_init();
 172:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SEG_init>
	SEG_clear();
 176:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <SEG_clear>
    // Test of SSD: display number '3' at position 0
	// Configure 16-bit Timer/Counter1 for Decimal counter
		TIM1_overflow_1s();
 17a:	e1 e8       	ldi	r30, 0x81	; 129
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8c 7f       	andi	r24, 0xFC	; 252
 182:	80 83       	st	Z, r24
 184:	80 81       	ld	r24, Z
 186:	84 60       	ori	r24, 0x04	; 4
 188:	80 83       	st	Z, r24
		TIM0_overflow_4ms();
 18a:	85 b5       	in	r24, 0x25	; 37
 18c:	8c 7f       	andi	r24, 0xFC	; 252
 18e:	85 bd       	out	0x25, r24	; 37
 190:	85 b5       	in	r24, 0x25	; 37
 192:	84 60       	ori	r24, 0x04	; 4
 194:	85 bd       	out	0x25, r24	; 37
    // Set the overflow prescaler to 262 ms and enable interrupt
		TIM1_overflow_interrupt_enable();
 196:	ef e6       	ldi	r30, 0x6F	; 111
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 83       	st	Z, r24
		TIM0_overflow_interrupt_enable();
 1a0:	ee e6       	ldi	r30, 0x6E	; 110
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
	sei();
 1aa:	78 94       	sei
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <main+0x3a>

000001ae <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
    if(counter >= 59)
 1ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <counter>
 1be:	8b 33       	cpi	r24, 0x3B	; 59
 1c0:	18 f0       	brcs	.+6      	; 0x1c8 <__vector_13+0x1a>
    {
	    counter = 0;
 1c2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter>
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <__vector_13+0x20>
    }
    else
    {
	    counter++;
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <counter>
    }
}
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 92       	push	r8
 1e6:	9f 92       	push	r9
 1e8:	af 92       	push	r10
 1ea:	bf 92       	push	r11
 1ec:	cf 92       	push	r12
 1ee:	df 92       	push	r13
 1f0:	ef 92       	push	r14
 1f2:	ff 92       	push	r15
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	cf 93       	push	r28
 20a:	ef 93       	push	r30
 20c:	ff 93       	push	r31
	static uint8_t pos = 0;	// This line will only run the first time
	static uint8_t digit;
	static uint8_t power;
	power = pow(10, pos + 1);
 20e:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <__data_end>
 212:	6c 2f       	mov	r22, r28
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	6f 5f       	subi	r22, 0xFF	; 255
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	07 2e       	mov	r0, r23
 21c:	00 0c       	add	r0, r0
 21e:	88 0b       	sbc	r24, r24
 220:	99 0b       	sbc	r25, r25
 222:	0e 94 94 02 	call	0x528	; 0x528 <__floatsisf>
 226:	9b 01       	movw	r18, r22
 228:	ac 01       	movw	r20, r24
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	80 e2       	ldi	r24, 0x20	; 32
 230:	91 e4       	ldi	r25, 0x41	; 65
 232:	0e 94 20 03 	call	0x640	; 0x640 <pow>
 236:	4b 01       	movw	r8, r22
 238:	5c 01       	movw	r10, r24
	digit = ((counter % power) / pow(10, pos));
 23a:	6c 2f       	mov	r22, r28
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 92 02 	call	0x524	; 0x524 <__floatunsisf>
 246:	9b 01       	movw	r18, r22
 248:	ac 01       	movw	r20, r24
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	80 e2       	ldi	r24, 0x20	; 32
 250:	91 e4       	ldi	r25, 0x41	; 65
 252:	0e 94 20 03 	call	0x640	; 0x640 <pow>
 256:	6b 01       	movw	r12, r22
 258:	7c 01       	movw	r14, r24
	
	SEG_update_shift_regs(digit, pos);
 25a:	c5 01       	movw	r24, r10
 25c:	b4 01       	movw	r22, r8
 25e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fixunssfsi>
 262:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <counter>
 266:	0e 94 7f 05 	call	0xafe	; 0xafe <__udivmodqi4>
 26a:	69 2f       	mov	r22, r25
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 94 02 	call	0x528	; 0x528 <__floatsisf>
 276:	a7 01       	movw	r20, r14
 278:	96 01       	movw	r18, r12
 27a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__divsf3>
 27e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fixunssfsi>
 282:	86 2f       	mov	r24, r22
 284:	6c 2f       	mov	r22, r28
 286:	0e 94 79 01 	call	0x2f2	; 0x2f2 <SEG_update_shift_regs>
	
	pos++;
 28a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (pos == 4)
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	19 f0       	breq	.+6      	; 0x29a <__vector_16+0xc0>
	power = pow(10, pos + 1);
	digit = ((counter % power) / pow(10, pos));
	
	SEG_update_shift_regs(digit, pos);
	
	pos++;
 294:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 298:	02 c0       	rjmp	.+4      	; 0x29e <__vector_16+0xc4>
	
	if (pos == 4)
	{
		pos = 0;
 29a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	cf 91       	pop	r28
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 2d2:	64 e0       	ldi	r22, 0x04	; 4
 2d4:	8a e2       	ldi	r24, 0x2A	; 42
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 2dc:	67 e0       	ldi	r22, 0x07	; 7
 2de:	8a e2       	ldi	r24, 0x2A	; 42
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	84 e2       	ldi	r24, 0x24	; 36
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_config_output>
 2f0:	08 95       	ret

000002f2 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
    uint8_t bit_number;
	
	segments = segment_value[segments];     // 0, 1, ..., 9
 2f8:	e8 2f       	mov	r30, r24
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ec 5f       	subi	r30, 0xFC	; 252
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	10 81       	ld	r17, Z
	position = segment_position[position];  // 0, 1, 2, 3
 302:	e6 2f       	mov	r30, r22
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	e0 50       	subi	r30, 0x00	; 0
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	d0 81       	ld	r29, Z
	
    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 30c:	64 e0       	ldi	r22, 0x04	; 4
 30e:	8b e2       	ldi	r24, 0x2B	; 43
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 a0 00 	call	0x140	; 0x140 <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 316:	67 e0       	ldi	r22, 0x07	; 7
 318:	8b e2       	ldi	r24, 0x2B	; 43
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 a0 00 	call	0x140	; 0x140 <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	85 e2       	ldi	r24, 0x25	; 37
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 a0 00 	call	0x140	; 0x140 <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	85 e0       	ldi	r24, 0x05	; 5
 32c:	8a 95       	dec	r24
 32e:	f1 f7       	brne	.-4      	; 0x32c <SEG_update_shift_regs+0x3a>
 330:	00 00       	nop
 332:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        if(segments & 1)
 334:	10 ff       	sbrs	r17, 0
 336:	06 c0       	rjmp	.+12     	; 0x344 <SEG_update_shift_regs+0x52>
        {
	        GPIO_write_high(&PORTB, SEG_DATA);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	85 e2       	ldi	r24, 0x25	; 37
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_write_high>
 342:	05 c0       	rjmp	.+10     	; 0x34e <SEG_update_shift_regs+0x5c>
        }
        else
        {
	        GPIO_write_low(&PORTB, SEG_DATA);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	85 e2       	ldi	r24, 0x25	; 37
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 a0 00 	call	0x140	; 0x140 <GPIO_write_low>
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	8a 95       	dec	r24
 352:	f1 f7       	brne	.-4      	; 0x350 <SEG_update_shift_regs+0x5e>
 354:	00 00       	nop

        // ...output DATA value
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 356:	67 e0       	ldi	r22, 0x07	; 7
 358:	8b e2       	ldi	r24, 0x2B	; 43
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_write_high>
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	8a 95       	dec	r24
 364:	f1 f7       	brne	.-4      	; 0x362 <SEG_update_shift_regs+0x70>
 366:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 368:	67 e0       	ldi	r22, 0x07	; 7
 36a:	8b e2       	ldi	r24, 0x2B	; 43
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 a0 00 	call	0x140	; 0x140 <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 372:	16 95       	lsr	r17
 374:	c1 50       	subi	r28, 0x01	; 1
    GPIO_write_low(&PORTB, SEG_DATA);
    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 376:	f1 f6       	brne	.-68     	; 0x334 <SEG_update_shift_regs+0x42>
 378:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
         if(position & 1)
 37a:	d0 ff       	sbrs	r29, 0
 37c:	06 c0       	rjmp	.+12     	; 0x38a <SEG_update_shift_regs+0x98>
         {
	         GPIO_write_high(&PORTB, SEG_DATA);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	85 e2       	ldi	r24, 0x25	; 37
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_write_high>
 388:	05 c0       	rjmp	.+10     	; 0x394 <SEG_update_shift_regs+0xa2>
         }
         else
         {
	         GPIO_write_low(&PORTB, SEG_DATA);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	85 e2       	ldi	r24, 0x25	; 37
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 a0 00 	call	0x140	; 0x140 <GPIO_write_low>
 394:	85 e0       	ldi	r24, 0x05	; 5
 396:	8a 95       	dec	r24
 398:	f1 f7       	brne	.-4      	; 0x396 <SEG_update_shift_regs+0xa4>
 39a:	00 00       	nop
         }
        // ...output DATA value
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 39c:	67 e0       	ldi	r22, 0x07	; 7
 39e:	8b e2       	ldi	r24, 0x2B	; 43
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_write_high>
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	8a 95       	dec	r24
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <SEG_update_shift_regs+0xb6>
 3ac:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 3ae:	67 e0       	ldi	r22, 0x07	; 7
 3b0:	8b e2       	ldi	r24, 0x2B	; 43
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 a0 00 	call	0x140	; 0x140 <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 3b8:	d6 95       	lsr	r29
 3ba:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 3bc:	f1 f6       	brne	.-68     	; 0x37a <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 3be:	64 e0       	ldi	r22, 0x04	; 4
 3c0:	8b e2       	ldi	r24, 0x2B	; 43
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_write_high>
 3c8:	85 e0       	ldi	r24, 0x05	; 5
 3ca:	8a 95       	dec	r24
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <SEG_update_shift_regs+0xd8>
 3ce:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	08 95       	ret

000003d8 <SEG_clear>:
/**********************************************************************
 * Function: SEG_clear()
 **********************************************************************/
void SEG_clear()
{
	SEG_update_shift_regs(0, 4);
 3d8:	64 e0       	ldi	r22, 0x04	; 4
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <SEG_update_shift_regs>
 3e0:	08 95       	ret

000003e2 <__divsf3>:
 3e2:	0e 94 05 02 	call	0x40a	; 0x40a <__divsf3x>
 3e6:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_round>
 3ea:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_pscB>
 3ee:	58 f0       	brcs	.+22     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_pscA>
 3f4:	40 f0       	brcs	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f6:	29 f4       	brne	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f8:	5f 3f       	cpi	r21, 0xFF	; 255
 3fa:	29 f0       	breq	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 400:	51 11       	cpse	r21, r1
 402:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>
 406:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_nan>

0000040a <__divsf3x>:
 40a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_split3>
 40e:	68 f3       	brcs	.-38     	; 0x3ea <__divsf3+0x8>

00000410 <__divsf3_pse>:
 410:	99 23       	and	r25, r25
 412:	b1 f3       	breq	.-20     	; 0x400 <__LOCK_REGION_LENGTH__>
 414:	55 23       	and	r21, r21
 416:	91 f3       	breq	.-28     	; 0x3fc <__divsf3+0x1a>
 418:	95 1b       	sub	r25, r21
 41a:	55 0b       	sbc	r21, r21
 41c:	bb 27       	eor	r27, r27
 41e:	aa 27       	eor	r26, r26
 420:	62 17       	cp	r22, r18
 422:	73 07       	cpc	r23, r19
 424:	84 07       	cpc	r24, r20
 426:	38 f0       	brcs	.+14     	; 0x436 <__divsf3_pse+0x26>
 428:	9f 5f       	subi	r25, 0xFF	; 255
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	44 1f       	adc	r20, r20
 432:	aa 1f       	adc	r26, r26
 434:	a9 f3       	breq	.-22     	; 0x420 <__divsf3_pse+0x10>
 436:	35 d0       	rcall	.+106    	; 0x4a2 <__divsf3_pse+0x92>
 438:	0e 2e       	mov	r0, r30
 43a:	3a f0       	brmi	.+14     	; 0x44a <__divsf3_pse+0x3a>
 43c:	e0 e8       	ldi	r30, 0x80	; 128
 43e:	32 d0       	rcall	.+100    	; 0x4a4 <__divsf3_pse+0x94>
 440:	91 50       	subi	r25, 0x01	; 1
 442:	50 40       	sbci	r21, 0x00	; 0
 444:	e6 95       	lsr	r30
 446:	00 1c       	adc	r0, r0
 448:	ca f7       	brpl	.-14     	; 0x43c <__divsf3_pse+0x2c>
 44a:	2b d0       	rcall	.+86     	; 0x4a2 <__divsf3_pse+0x92>
 44c:	fe 2f       	mov	r31, r30
 44e:	29 d0       	rcall	.+82     	; 0x4a2 <__divsf3_pse+0x92>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	bb 1f       	adc	r27, r27
 458:	26 17       	cp	r18, r22
 45a:	37 07       	cpc	r19, r23
 45c:	48 07       	cpc	r20, r24
 45e:	ab 07       	cpc	r26, r27
 460:	b0 e8       	ldi	r27, 0x80	; 128
 462:	09 f0       	breq	.+2      	; 0x466 <__divsf3_pse+0x56>
 464:	bb 0b       	sbc	r27, r27
 466:	80 2d       	mov	r24, r0
 468:	bf 01       	movw	r22, r30
 46a:	ff 27       	eor	r31, r31
 46c:	93 58       	subi	r25, 0x83	; 131
 46e:	5f 4f       	sbci	r21, 0xFF	; 255
 470:	3a f0       	brmi	.+14     	; 0x480 <__divsf3_pse+0x70>
 472:	9e 3f       	cpi	r25, 0xFE	; 254
 474:	51 05       	cpc	r21, r1
 476:	78 f0       	brcs	.+30     	; 0x496 <__divsf3_pse+0x86>
 478:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 47c:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>
 480:	5f 3f       	cpi	r21, 0xFF	; 255
 482:	e4 f3       	brlt	.-8      	; 0x47c <__divsf3_pse+0x6c>
 484:	98 3e       	cpi	r25, 0xE8	; 232
 486:	d4 f3       	brlt	.-12     	; 0x47c <__divsf3_pse+0x6c>
 488:	86 95       	lsr	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b7 95       	ror	r27
 490:	f7 95       	ror	r31
 492:	9f 5f       	subi	r25, 0xFF	; 255
 494:	c9 f7       	brne	.-14     	; 0x488 <__divsf3_pse+0x78>
 496:	88 0f       	add	r24, r24
 498:	91 1d       	adc	r25, r1
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	97 f9       	bld	r25, 7
 4a0:	08 95       	ret
 4a2:	e1 e0       	ldi	r30, 0x01	; 1
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	bb 1f       	adc	r27, r27
 4ac:	62 17       	cp	r22, r18
 4ae:	73 07       	cpc	r23, r19
 4b0:	84 07       	cpc	r24, r20
 4b2:	ba 07       	cpc	r27, r26
 4b4:	20 f0       	brcs	.+8      	; 0x4be <__divsf3_pse+0xae>
 4b6:	62 1b       	sub	r22, r18
 4b8:	73 0b       	sbc	r23, r19
 4ba:	84 0b       	sbc	r24, r20
 4bc:	ba 0b       	sbc	r27, r26
 4be:	ee 1f       	adc	r30, r30
 4c0:	88 f7       	brcc	.-30     	; 0x4a4 <__divsf3_pse+0x94>
 4c2:	e0 95       	com	r30
 4c4:	08 95       	ret

000004c6 <__fixunssfsi>:
 4c6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_splitA>
 4ca:	88 f0       	brcs	.+34     	; 0x4ee <__fixunssfsi+0x28>
 4cc:	9f 57       	subi	r25, 0x7F	; 127
 4ce:	98 f0       	brcs	.+38     	; 0x4f6 <__fixunssfsi+0x30>
 4d0:	b9 2f       	mov	r27, r25
 4d2:	99 27       	eor	r25, r25
 4d4:	b7 51       	subi	r27, 0x17	; 23
 4d6:	b0 f0       	brcs	.+44     	; 0x504 <__fixunssfsi+0x3e>
 4d8:	e1 f0       	breq	.+56     	; 0x512 <__fixunssfsi+0x4c>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	88 1f       	adc	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	1a f0       	brmi	.+6      	; 0x4ea <__fixunssfsi+0x24>
 4e4:	ba 95       	dec	r27
 4e6:	c9 f7       	brne	.-14     	; 0x4da <__fixunssfsi+0x14>
 4e8:	14 c0       	rjmp	.+40     	; 0x512 <__fixunssfsi+0x4c>
 4ea:	b1 30       	cpi	r27, 0x01	; 1
 4ec:	91 f0       	breq	.+36     	; 0x512 <__fixunssfsi+0x4c>
 4ee:	0e 94 19 03 	call	0x632	; 0x632 <__fp_zero>
 4f2:	b1 e0       	ldi	r27, 0x01	; 1
 4f4:	08 95       	ret
 4f6:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_zero>
 4fa:	67 2f       	mov	r22, r23
 4fc:	78 2f       	mov	r23, r24
 4fe:	88 27       	eor	r24, r24
 500:	b8 5f       	subi	r27, 0xF8	; 248
 502:	39 f0       	breq	.+14     	; 0x512 <__fixunssfsi+0x4c>
 504:	b9 3f       	cpi	r27, 0xF9	; 249
 506:	cc f3       	brlt	.-14     	; 0x4fa <__fixunssfsi+0x34>
 508:	86 95       	lsr	r24
 50a:	77 95       	ror	r23
 50c:	67 95       	ror	r22
 50e:	b3 95       	inc	r27
 510:	d9 f7       	brne	.-10     	; 0x508 <__fixunssfsi+0x42>
 512:	3e f4       	brtc	.+14     	; 0x522 <__fixunssfsi+0x5c>
 514:	90 95       	com	r25
 516:	80 95       	com	r24
 518:	70 95       	com	r23
 51a:	61 95       	neg	r22
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	8f 4f       	sbci	r24, 0xFF	; 255
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	08 95       	ret

00000524 <__floatunsisf>:
 524:	e8 94       	clt
 526:	09 c0       	rjmp	.+18     	; 0x53a <__floatsisf+0x12>

00000528 <__floatsisf>:
 528:	97 fb       	bst	r25, 7
 52a:	3e f4       	brtc	.+14     	; 0x53a <__floatsisf+0x12>
 52c:	90 95       	com	r25
 52e:	80 95       	com	r24
 530:	70 95       	com	r23
 532:	61 95       	neg	r22
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	8f 4f       	sbci	r24, 0xFF	; 255
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	99 23       	and	r25, r25
 53c:	a9 f0       	breq	.+42     	; 0x568 <__floatsisf+0x40>
 53e:	f9 2f       	mov	r31, r25
 540:	96 e9       	ldi	r25, 0x96	; 150
 542:	bb 27       	eor	r27, r27
 544:	93 95       	inc	r25
 546:	f6 95       	lsr	r31
 548:	87 95       	ror	r24
 54a:	77 95       	ror	r23
 54c:	67 95       	ror	r22
 54e:	b7 95       	ror	r27
 550:	f1 11       	cpse	r31, r1
 552:	f8 cf       	rjmp	.-16     	; 0x544 <__floatsisf+0x1c>
 554:	fa f4       	brpl	.+62     	; 0x594 <__floatsisf+0x6c>
 556:	bb 0f       	add	r27, r27
 558:	11 f4       	brne	.+4      	; 0x55e <__floatsisf+0x36>
 55a:	60 ff       	sbrs	r22, 0
 55c:	1b c0       	rjmp	.+54     	; 0x594 <__floatsisf+0x6c>
 55e:	6f 5f       	subi	r22, 0xFF	; 255
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	8f 4f       	sbci	r24, 0xFF	; 255
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	16 c0       	rjmp	.+44     	; 0x594 <__floatsisf+0x6c>
 568:	88 23       	and	r24, r24
 56a:	11 f0       	breq	.+4      	; 0x570 <__floatsisf+0x48>
 56c:	96 e9       	ldi	r25, 0x96	; 150
 56e:	11 c0       	rjmp	.+34     	; 0x592 <__floatsisf+0x6a>
 570:	77 23       	and	r23, r23
 572:	21 f0       	breq	.+8      	; 0x57c <__floatsisf+0x54>
 574:	9e e8       	ldi	r25, 0x8E	; 142
 576:	87 2f       	mov	r24, r23
 578:	76 2f       	mov	r23, r22
 57a:	05 c0       	rjmp	.+10     	; 0x586 <__floatsisf+0x5e>
 57c:	66 23       	and	r22, r22
 57e:	71 f0       	breq	.+28     	; 0x59c <__floatsisf+0x74>
 580:	96 e8       	ldi	r25, 0x86	; 134
 582:	86 2f       	mov	r24, r22
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	2a f0       	brmi	.+10     	; 0x594 <__floatsisf+0x6c>
 58a:	9a 95       	dec	r25
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	da f7       	brpl	.-10     	; 0x58a <__floatsisf+0x62>
 594:	88 0f       	add	r24, r24
 596:	96 95       	lsr	r25
 598:	87 95       	ror	r24
 59a:	97 f9       	bld	r25, 7
 59c:	08 95       	ret

0000059e <__fp_inf>:
 59e:	97 f9       	bld	r25, 7
 5a0:	9f 67       	ori	r25, 0x7F	; 127
 5a2:	80 e8       	ldi	r24, 0x80	; 128
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	08 95       	ret

000005aa <__fp_nan>:
 5aa:	9f ef       	ldi	r25, 0xFF	; 255
 5ac:	80 ec       	ldi	r24, 0xC0	; 192
 5ae:	08 95       	ret

000005b0 <__fp_pscA>:
 5b0:	00 24       	eor	r0, r0
 5b2:	0a 94       	dec	r0
 5b4:	16 16       	cp	r1, r22
 5b6:	17 06       	cpc	r1, r23
 5b8:	18 06       	cpc	r1, r24
 5ba:	09 06       	cpc	r0, r25
 5bc:	08 95       	ret

000005be <__fp_pscB>:
 5be:	00 24       	eor	r0, r0
 5c0:	0a 94       	dec	r0
 5c2:	12 16       	cp	r1, r18
 5c4:	13 06       	cpc	r1, r19
 5c6:	14 06       	cpc	r1, r20
 5c8:	05 06       	cpc	r0, r21
 5ca:	08 95       	ret

000005cc <__fp_round>:
 5cc:	09 2e       	mov	r0, r25
 5ce:	03 94       	inc	r0
 5d0:	00 0c       	add	r0, r0
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <__fp_round+0xc>
 5d4:	88 23       	and	r24, r24
 5d6:	52 f0       	brmi	.+20     	; 0x5ec <__fp_round+0x20>
 5d8:	bb 0f       	add	r27, r27
 5da:	40 f4       	brcc	.+16     	; 0x5ec <__fp_round+0x20>
 5dc:	bf 2b       	or	r27, r31
 5de:	11 f4       	brne	.+4      	; 0x5e4 <__fp_round+0x18>
 5e0:	60 ff       	sbrs	r22, 0
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <__fp_round+0x20>
 5e4:	6f 5f       	subi	r22, 0xFF	; 255
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	08 95       	ret

000005ee <__fp_split3>:
 5ee:	57 fd       	sbrc	r21, 7
 5f0:	90 58       	subi	r25, 0x80	; 128
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	59 f0       	breq	.+22     	; 0x60e <__fp_splitA+0x10>
 5f8:	5f 3f       	cpi	r21, 0xFF	; 255
 5fa:	71 f0       	breq	.+28     	; 0x618 <__fp_splitA+0x1a>
 5fc:	47 95       	ror	r20

000005fe <__fp_splitA>:
 5fe:	88 0f       	add	r24, r24
 600:	97 fb       	bst	r25, 7
 602:	99 1f       	adc	r25, r25
 604:	61 f0       	breq	.+24     	; 0x61e <__fp_splitA+0x20>
 606:	9f 3f       	cpi	r25, 0xFF	; 255
 608:	79 f0       	breq	.+30     	; 0x628 <__fp_splitA+0x2a>
 60a:	87 95       	ror	r24
 60c:	08 95       	ret
 60e:	12 16       	cp	r1, r18
 610:	13 06       	cpc	r1, r19
 612:	14 06       	cpc	r1, r20
 614:	55 1f       	adc	r21, r21
 616:	f2 cf       	rjmp	.-28     	; 0x5fc <__fp_split3+0xe>
 618:	46 95       	lsr	r20
 61a:	f1 df       	rcall	.-30     	; 0x5fe <__fp_splitA>
 61c:	08 c0       	rjmp	.+16     	; 0x62e <__fp_splitA+0x30>
 61e:	16 16       	cp	r1, r22
 620:	17 06       	cpc	r1, r23
 622:	18 06       	cpc	r1, r24
 624:	99 1f       	adc	r25, r25
 626:	f1 cf       	rjmp	.-30     	; 0x60a <__fp_splitA+0xc>
 628:	86 95       	lsr	r24
 62a:	71 05       	cpc	r23, r1
 62c:	61 05       	cpc	r22, r1
 62e:	08 94       	sec
 630:	08 95       	ret

00000632 <__fp_zero>:
 632:	e8 94       	clt

00000634 <__fp_szero>:
 634:	bb 27       	eor	r27, r27
 636:	66 27       	eor	r22, r22
 638:	77 27       	eor	r23, r23
 63a:	cb 01       	movw	r24, r22
 63c:	97 f9       	bld	r25, 7
 63e:	08 95       	ret

00000640 <pow>:
 640:	fa 01       	movw	r30, r20
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	30 96       	adiw	r30, 0x00	; 0
 648:	21 05       	cpc	r18, r1
 64a:	31 05       	cpc	r19, r1
 64c:	a1 f1       	breq	.+104    	; 0x6b6 <pow+0x76>
 64e:	61 15       	cp	r22, r1
 650:	71 05       	cpc	r23, r1
 652:	61 f4       	brne	.+24     	; 0x66c <pow+0x2c>
 654:	80 38       	cpi	r24, 0x80	; 128
 656:	bf e3       	ldi	r27, 0x3F	; 63
 658:	9b 07       	cpc	r25, r27
 65a:	49 f1       	breq	.+82     	; 0x6ae <pow+0x6e>
 65c:	68 94       	set
 65e:	90 38       	cpi	r25, 0x80	; 128
 660:	81 05       	cpc	r24, r1
 662:	61 f0       	breq	.+24     	; 0x67c <pow+0x3c>
 664:	80 38       	cpi	r24, 0x80	; 128
 666:	bf ef       	ldi	r27, 0xFF	; 255
 668:	9b 07       	cpc	r25, r27
 66a:	41 f0       	breq	.+16     	; 0x67c <pow+0x3c>
 66c:	99 23       	and	r25, r25
 66e:	4a f5       	brpl	.+82     	; 0x6c2 <pow+0x82>
 670:	ff 3f       	cpi	r31, 0xFF	; 255
 672:	e1 05       	cpc	r30, r1
 674:	31 05       	cpc	r19, r1
 676:	21 05       	cpc	r18, r1
 678:	19 f1       	breq	.+70     	; 0x6c0 <pow+0x80>
 67a:	e8 94       	clt
 67c:	08 94       	sec
 67e:	e7 95       	ror	r30
 680:	d9 01       	movw	r26, r18
 682:	aa 23       	and	r26, r26
 684:	29 f4       	brne	.+10     	; 0x690 <pow+0x50>
 686:	ab 2f       	mov	r26, r27
 688:	be 2f       	mov	r27, r30
 68a:	f8 5f       	subi	r31, 0xF8	; 248
 68c:	d0 f3       	brcs	.-12     	; 0x682 <pow+0x42>
 68e:	10 c0       	rjmp	.+32     	; 0x6b0 <pow+0x70>
 690:	ff 5f       	subi	r31, 0xFF	; 255
 692:	70 f4       	brcc	.+28     	; 0x6b0 <pow+0x70>
 694:	a6 95       	lsr	r26
 696:	e0 f7       	brcc	.-8      	; 0x690 <pow+0x50>
 698:	f7 39       	cpi	r31, 0x97	; 151
 69a:	50 f0       	brcs	.+20     	; 0x6b0 <pow+0x70>
 69c:	19 f0       	breq	.+6      	; 0x6a4 <pow+0x64>
 69e:	ff 3a       	cpi	r31, 0xAF	; 175
 6a0:	38 f4       	brcc	.+14     	; 0x6b0 <pow+0x70>
 6a2:	9f 77       	andi	r25, 0x7F	; 127
 6a4:	9f 93       	push	r25
 6a6:	0d d0       	rcall	.+26     	; 0x6c2 <pow+0x82>
 6a8:	0f 90       	pop	r0
 6aa:	07 fc       	sbrc	r0, 7
 6ac:	90 58       	subi	r25, 0x80	; 128
 6ae:	08 95       	ret
 6b0:	46 f0       	brts	.+16     	; 0x6c2 <pow+0x82>
 6b2:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_nan>
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	80 e8       	ldi	r24, 0x80	; 128
 6bc:	9f e3       	ldi	r25, 0x3F	; 63
 6be:	08 95       	ret
 6c0:	4f e7       	ldi	r20, 0x7F	; 127
 6c2:	9f 77       	andi	r25, 0x7F	; 127
 6c4:	5f 93       	push	r21
 6c6:	4f 93       	push	r20
 6c8:	3f 93       	push	r19
 6ca:	2f 93       	push	r18
 6cc:	0e 94 1b 04 	call	0x836	; 0x836 <log>
 6d0:	2f 91       	pop	r18
 6d2:	3f 91       	pop	r19
 6d4:	4f 91       	pop	r20
 6d6:	5f 91       	pop	r21
 6d8:	0e 94 97 04 	call	0x92e	; 0x92e <__mulsf3>
 6dc:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <exp>
 6e0:	29 f4       	brne	.+10     	; 0x6ec <pow+0xac>
 6e2:	16 f0       	brts	.+4      	; 0x6e8 <pow+0xa8>
 6e4:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 6e8:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_zero>
 6ec:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_nan>

000006f0 <exp>:
 6f0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_splitA>
 6f4:	a8 f3       	brcs	.-22     	; 0x6e0 <pow+0xa0>
 6f6:	96 38       	cpi	r25, 0x86	; 134
 6f8:	a0 f7       	brcc	.-24     	; 0x6e2 <pow+0xa2>
 6fa:	07 f8       	bld	r0, 7
 6fc:	0f 92       	push	r0
 6fe:	e8 94       	clt
 700:	2b e3       	ldi	r18, 0x3B	; 59
 702:	3a ea       	ldi	r19, 0xAA	; 170
 704:	48 eb       	ldi	r20, 0xB8	; 184
 706:	5f e7       	ldi	r21, 0x7F	; 127
 708:	0e 94 ad 04 	call	0x95a	; 0x95a <__mulsf3_pse>
 70c:	0f 92       	push	r0
 70e:	0f 92       	push	r0
 710:	0f 92       	push	r0
 712:	4d b7       	in	r20, 0x3d	; 61
 714:	5e b7       	in	r21, 0x3e	; 62
 716:	0f 92       	push	r0
 718:	0e 94 63 04 	call	0x8c6	; 0x8c6 <modf>
 71c:	e8 e6       	ldi	r30, 0x68	; 104
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_powser>
 724:	4f 91       	pop	r20
 726:	5f 91       	pop	r21
 728:	ef 91       	pop	r30
 72a:	ff 91       	pop	r31
 72c:	e5 95       	asr	r30
 72e:	ee 1f       	adc	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	49 f0       	breq	.+18     	; 0x746 <exp+0x56>
 734:	fe 57       	subi	r31, 0x7E	; 126
 736:	e0 68       	ori	r30, 0x80	; 128
 738:	44 27       	eor	r20, r20
 73a:	ee 0f       	add	r30, r30
 73c:	44 1f       	adc	r20, r20
 73e:	fa 95       	dec	r31
 740:	e1 f7       	brne	.-8      	; 0x73a <exp+0x4a>
 742:	41 95       	neg	r20
 744:	55 0b       	sbc	r21, r21
 746:	0e 94 dd 03 	call	0x7ba	; 0x7ba <ldexp>
 74a:	0f 90       	pop	r0
 74c:	07 fe       	sbrs	r0, 7
 74e:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <inverse>
 752:	08 95       	ret

00000754 <__fp_powser>:
 754:	df 93       	push	r29
 756:	cf 93       	push	r28
 758:	1f 93       	push	r17
 75a:	0f 93       	push	r16
 75c:	ff 92       	push	r15
 75e:	ef 92       	push	r14
 760:	df 92       	push	r13
 762:	7b 01       	movw	r14, r22
 764:	8c 01       	movw	r16, r24
 766:	68 94       	set
 768:	06 c0       	rjmp	.+12     	; 0x776 <__fp_powser+0x22>
 76a:	da 2e       	mov	r13, r26
 76c:	ef 01       	movw	r28, r30
 76e:	0e 94 aa 04 	call	0x954	; 0x954 <__mulsf3x>
 772:	fe 01       	movw	r30, r28
 774:	e8 94       	clt
 776:	a5 91       	lpm	r26, Z+
 778:	25 91       	lpm	r18, Z+
 77a:	35 91       	lpm	r19, Z+
 77c:	45 91       	lpm	r20, Z+
 77e:	55 91       	lpm	r21, Z+
 780:	a6 f3       	brts	.-24     	; 0x76a <__fp_powser+0x16>
 782:	ef 01       	movw	r28, r30
 784:	0e 94 1c 05 	call	0xa38	; 0xa38 <__addsf3x>
 788:	fe 01       	movw	r30, r28
 78a:	97 01       	movw	r18, r14
 78c:	a8 01       	movw	r20, r16
 78e:	da 94       	dec	r13
 790:	69 f7       	brne	.-38     	; 0x76c <__fp_powser+0x18>
 792:	df 90       	pop	r13
 794:	ef 90       	pop	r14
 796:	ff 90       	pop	r15
 798:	0f 91       	pop	r16
 79a:	1f 91       	pop	r17
 79c:	cf 91       	pop	r28
 79e:	df 91       	pop	r29
 7a0:	08 95       	ret

000007a2 <inverse>:
 7a2:	9b 01       	movw	r18, r22
 7a4:	ac 01       	movw	r20, r24
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	80 e8       	ldi	r24, 0x80	; 128
 7ac:	9f e3       	ldi	r25, 0x3F	; 63
 7ae:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__divsf3>
 7b2:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 7b6:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_mpack>

000007ba <ldexp>:
 7ba:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_splitA>
 7be:	d8 f3       	brcs	.-10     	; 0x7b6 <inverse+0x14>
 7c0:	99 23       	and	r25, r25
 7c2:	c9 f3       	breq	.-14     	; 0x7b6 <inverse+0x14>
 7c4:	94 0f       	add	r25, r20
 7c6:	51 1d       	adc	r21, r1
 7c8:	a3 f3       	brvs	.-24     	; 0x7b2 <inverse+0x10>
 7ca:	91 50       	subi	r25, 0x01	; 1
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	94 f0       	brlt	.+36     	; 0x7f4 <ldexp+0x3a>
 7d0:	59 f0       	breq	.+22     	; 0x7e8 <ldexp+0x2e>
 7d2:	88 23       	and	r24, r24
 7d4:	32 f0       	brmi	.+12     	; 0x7e2 <ldexp+0x28>
 7d6:	66 0f       	add	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	c1 f7       	brne	.-16     	; 0x7d2 <ldexp+0x18>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	2c f7       	brge	.-54     	; 0x7b2 <inverse+0x10>
 7e8:	88 0f       	add	r24, r24
 7ea:	91 1d       	adc	r25, r1
 7ec:	96 95       	lsr	r25
 7ee:	87 95       	ror	r24
 7f0:	97 f9       	bld	r25, 7
 7f2:	08 95       	ret
 7f4:	5f 3f       	cpi	r21, 0xFF	; 255
 7f6:	ac f0       	brlt	.+42     	; 0x822 <ldexp+0x68>
 7f8:	98 3e       	cpi	r25, 0xE8	; 232
 7fa:	9c f0       	brlt	.+38     	; 0x822 <ldexp+0x68>
 7fc:	bb 27       	eor	r27, r27
 7fe:	86 95       	lsr	r24
 800:	77 95       	ror	r23
 802:	67 95       	ror	r22
 804:	b7 95       	ror	r27
 806:	08 f4       	brcc	.+2      	; 0x80a <ldexp+0x50>
 808:	b1 60       	ori	r27, 0x01	; 1
 80a:	93 95       	inc	r25
 80c:	c1 f7       	brne	.-16     	; 0x7fe <ldexp+0x44>
 80e:	bb 0f       	add	r27, r27
 810:	58 f7       	brcc	.-42     	; 0x7e8 <ldexp+0x2e>
 812:	11 f4       	brne	.+4      	; 0x818 <ldexp+0x5e>
 814:	60 ff       	sbrs	r22, 0
 816:	e8 cf       	rjmp	.-48     	; 0x7e8 <ldexp+0x2e>
 818:	6f 5f       	subi	r22, 0xFF	; 255
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	e3 cf       	rjmp	.-58     	; 0x7e8 <ldexp+0x2e>
 822:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>
 826:	16 f0       	brts	.+4      	; 0x82c <ldexp+0x72>
 828:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_mpack>
 82c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_nan>
 830:	68 94       	set
 832:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>

00000836 <log>:
 836:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_splitA>
 83a:	a8 f3       	brcs	.-22     	; 0x826 <ldexp+0x6c>
 83c:	99 23       	and	r25, r25
 83e:	c1 f3       	breq	.-16     	; 0x830 <ldexp+0x76>
 840:	ae f3       	brts	.-22     	; 0x82c <ldexp+0x72>
 842:	df 93       	push	r29
 844:	cf 93       	push	r28
 846:	1f 93       	push	r17
 848:	0f 93       	push	r16
 84a:	ff 92       	push	r15
 84c:	c9 2f       	mov	r28, r25
 84e:	dd 27       	eor	r29, r29
 850:	88 23       	and	r24, r24
 852:	2a f0       	brmi	.+10     	; 0x85e <log+0x28>
 854:	21 97       	sbiw	r28, 0x01	; 1
 856:	66 0f       	add	r22, r22
 858:	77 1f       	adc	r23, r23
 85a:	88 1f       	adc	r24, r24
 85c:	da f7       	brpl	.-10     	; 0x854 <log+0x1e>
 85e:	20 e0       	ldi	r18, 0x00	; 0
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	40 e8       	ldi	r20, 0x80	; 128
 864:	5f eb       	ldi	r21, 0xBF	; 191
 866:	9f e3       	ldi	r25, 0x3F	; 63
 868:	88 39       	cpi	r24, 0x98	; 152
 86a:	20 f0       	brcs	.+8      	; 0x874 <log+0x3e>
 86c:	80 3e       	cpi	r24, 0xE0	; 224
 86e:	38 f0       	brcs	.+14     	; 0x87e <log+0x48>
 870:	21 96       	adiw	r28, 0x01	; 1
 872:	8f 77       	andi	r24, 0x7F	; 127
 874:	0e 94 05 05 	call	0xa0a	; 0xa0a <__addsf3>
 878:	e0 e9       	ldi	r30, 0x90	; 144
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	04 c0       	rjmp	.+8      	; 0x886 <log+0x50>
 87e:	0e 94 05 05 	call	0xa0a	; 0xa0a <__addsf3>
 882:	ed eb       	ldi	r30, 0xBD	; 189
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_powser>
 88a:	8b 01       	movw	r16, r22
 88c:	be 01       	movw	r22, r28
 88e:	ec 01       	movw	r28, r24
 890:	fb 2e       	mov	r15, r27
 892:	6f 57       	subi	r22, 0x7F	; 127
 894:	71 09       	sbc	r23, r1
 896:	75 95       	asr	r23
 898:	77 1f       	adc	r23, r23
 89a:	88 0b       	sbc	r24, r24
 89c:	99 0b       	sbc	r25, r25
 89e:	0e 94 94 02 	call	0x528	; 0x528 <__floatsisf>
 8a2:	28 e1       	ldi	r18, 0x18	; 24
 8a4:	32 e7       	ldi	r19, 0x72	; 114
 8a6:	41 e3       	ldi	r20, 0x31	; 49
 8a8:	5f e3       	ldi	r21, 0x3F	; 63
 8aa:	0e 94 aa 04 	call	0x954	; 0x954 <__mulsf3x>
 8ae:	af 2d       	mov	r26, r15
 8b0:	98 01       	movw	r18, r16
 8b2:	ae 01       	movw	r20, r28
 8b4:	ff 90       	pop	r15
 8b6:	0f 91       	pop	r16
 8b8:	1f 91       	pop	r17
 8ba:	cf 91       	pop	r28
 8bc:	df 91       	pop	r29
 8be:	0e 94 1c 05 	call	0xa38	; 0xa38 <__addsf3x>
 8c2:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_round>

000008c6 <modf>:
 8c6:	fa 01       	movw	r30, r20
 8c8:	dc 01       	movw	r26, r24
 8ca:	aa 0f       	add	r26, r26
 8cc:	bb 1f       	adc	r27, r27
 8ce:	9b 01       	movw	r18, r22
 8d0:	ac 01       	movw	r20, r24
 8d2:	bf 57       	subi	r27, 0x7F	; 127
 8d4:	28 f4       	brcc	.+10     	; 0x8e0 <modf+0x1a>
 8d6:	22 27       	eor	r18, r18
 8d8:	33 27       	eor	r19, r19
 8da:	44 27       	eor	r20, r20
 8dc:	50 78       	andi	r21, 0x80	; 128
 8de:	20 c0       	rjmp	.+64     	; 0x920 <__stack+0x21>
 8e0:	b7 51       	subi	r27, 0x17	; 23
 8e2:	90 f4       	brcc	.+36     	; 0x908 <__stack+0x9>
 8e4:	ab 2f       	mov	r26, r27
 8e6:	00 24       	eor	r0, r0
 8e8:	46 95       	lsr	r20
 8ea:	37 95       	ror	r19
 8ec:	27 95       	ror	r18
 8ee:	01 1c       	adc	r0, r1
 8f0:	a3 95       	inc	r26
 8f2:	d2 f3       	brmi	.-12     	; 0x8e8 <modf+0x22>
 8f4:	00 20       	and	r0, r0
 8f6:	71 f0       	breq	.+28     	; 0x914 <__stack+0x15>
 8f8:	22 0f       	add	r18, r18
 8fa:	33 1f       	adc	r19, r19
 8fc:	44 1f       	adc	r20, r20
 8fe:	b3 95       	inc	r27
 900:	da f3       	brmi	.-10     	; 0x8f8 <modf+0x32>
 902:	0e d0       	rcall	.+28     	; 0x920 <__stack+0x21>
 904:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__subsf3>
 908:	61 30       	cpi	r22, 0x01	; 1
 90a:	71 05       	cpc	r23, r1
 90c:	a0 e8       	ldi	r26, 0x80	; 128
 90e:	8a 07       	cpc	r24, r26
 910:	b9 46       	sbci	r27, 0x69	; 105
 912:	30 f4       	brcc	.+12     	; 0x920 <__stack+0x21>
 914:	9b 01       	movw	r18, r22
 916:	ac 01       	movw	r20, r24
 918:	66 27       	eor	r22, r22
 91a:	77 27       	eor	r23, r23
 91c:	88 27       	eor	r24, r24
 91e:	90 78       	andi	r25, 0x80	; 128
 920:	30 96       	adiw	r30, 0x00	; 0
 922:	21 f0       	breq	.+8      	; 0x92c <__stack+0x2d>
 924:	20 83       	st	Z, r18
 926:	31 83       	std	Z+1, r19	; 0x01
 928:	42 83       	std	Z+2, r20	; 0x02
 92a:	53 83       	std	Z+3, r21	; 0x03
 92c:	08 95       	ret

0000092e <__mulsf3>:
 92e:	0e 94 aa 04 	call	0x954	; 0x954 <__mulsf3x>
 932:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_round>
 936:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_pscA>
 93a:	38 f0       	brcs	.+14     	; 0x94a <__mulsf3+0x1c>
 93c:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_pscB>
 940:	20 f0       	brcs	.+8      	; 0x94a <__mulsf3+0x1c>
 942:	95 23       	and	r25, r21
 944:	11 f0       	breq	.+4      	; 0x94a <__mulsf3+0x1c>
 946:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 94a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_nan>
 94e:	11 24       	eor	r1, r1
 950:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>

00000954 <__mulsf3x>:
 954:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_split3>
 958:	70 f3       	brcs	.-36     	; 0x936 <__mulsf3+0x8>

0000095a <__mulsf3_pse>:
 95a:	95 9f       	mul	r25, r21
 95c:	c1 f3       	breq	.-16     	; 0x94e <__mulsf3+0x20>
 95e:	95 0f       	add	r25, r21
 960:	50 e0       	ldi	r21, 0x00	; 0
 962:	55 1f       	adc	r21, r21
 964:	62 9f       	mul	r22, r18
 966:	f0 01       	movw	r30, r0
 968:	72 9f       	mul	r23, r18
 96a:	bb 27       	eor	r27, r27
 96c:	f0 0d       	add	r31, r0
 96e:	b1 1d       	adc	r27, r1
 970:	63 9f       	mul	r22, r19
 972:	aa 27       	eor	r26, r26
 974:	f0 0d       	add	r31, r0
 976:	b1 1d       	adc	r27, r1
 978:	aa 1f       	adc	r26, r26
 97a:	64 9f       	mul	r22, r20
 97c:	66 27       	eor	r22, r22
 97e:	b0 0d       	add	r27, r0
 980:	a1 1d       	adc	r26, r1
 982:	66 1f       	adc	r22, r22
 984:	82 9f       	mul	r24, r18
 986:	22 27       	eor	r18, r18
 988:	b0 0d       	add	r27, r0
 98a:	a1 1d       	adc	r26, r1
 98c:	62 1f       	adc	r22, r18
 98e:	73 9f       	mul	r23, r19
 990:	b0 0d       	add	r27, r0
 992:	a1 1d       	adc	r26, r1
 994:	62 1f       	adc	r22, r18
 996:	83 9f       	mul	r24, r19
 998:	a0 0d       	add	r26, r0
 99a:	61 1d       	adc	r22, r1
 99c:	22 1f       	adc	r18, r18
 99e:	74 9f       	mul	r23, r20
 9a0:	33 27       	eor	r19, r19
 9a2:	a0 0d       	add	r26, r0
 9a4:	61 1d       	adc	r22, r1
 9a6:	23 1f       	adc	r18, r19
 9a8:	84 9f       	mul	r24, r20
 9aa:	60 0d       	add	r22, r0
 9ac:	21 1d       	adc	r18, r1
 9ae:	82 2f       	mov	r24, r18
 9b0:	76 2f       	mov	r23, r22
 9b2:	6a 2f       	mov	r22, r26
 9b4:	11 24       	eor	r1, r1
 9b6:	9f 57       	subi	r25, 0x7F	; 127
 9b8:	50 40       	sbci	r21, 0x00	; 0
 9ba:	9a f0       	brmi	.+38     	; 0x9e2 <__mulsf3_pse+0x88>
 9bc:	f1 f0       	breq	.+60     	; 0x9fa <__mulsf3_pse+0xa0>
 9be:	88 23       	and	r24, r24
 9c0:	4a f0       	brmi	.+18     	; 0x9d4 <__mulsf3_pse+0x7a>
 9c2:	ee 0f       	add	r30, r30
 9c4:	ff 1f       	adc	r31, r31
 9c6:	bb 1f       	adc	r27, r27
 9c8:	66 1f       	adc	r22, r22
 9ca:	77 1f       	adc	r23, r23
 9cc:	88 1f       	adc	r24, r24
 9ce:	91 50       	subi	r25, 0x01	; 1
 9d0:	50 40       	sbci	r21, 0x00	; 0
 9d2:	a9 f7       	brne	.-22     	; 0x9be <__mulsf3_pse+0x64>
 9d4:	9e 3f       	cpi	r25, 0xFE	; 254
 9d6:	51 05       	cpc	r21, r1
 9d8:	80 f0       	brcs	.+32     	; 0x9fa <__mulsf3_pse+0xa0>
 9da:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>
 9de:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_szero>
 9e2:	5f 3f       	cpi	r21, 0xFF	; 255
 9e4:	e4 f3       	brlt	.-8      	; 0x9de <__mulsf3_pse+0x84>
 9e6:	98 3e       	cpi	r25, 0xE8	; 232
 9e8:	d4 f3       	brlt	.-12     	; 0x9de <__mulsf3_pse+0x84>
 9ea:	86 95       	lsr	r24
 9ec:	77 95       	ror	r23
 9ee:	67 95       	ror	r22
 9f0:	b7 95       	ror	r27
 9f2:	f7 95       	ror	r31
 9f4:	e7 95       	ror	r30
 9f6:	9f 5f       	subi	r25, 0xFF	; 255
 9f8:	c1 f7       	brne	.-16     	; 0x9ea <__mulsf3_pse+0x90>
 9fa:	fe 2b       	or	r31, r30
 9fc:	88 0f       	add	r24, r24
 9fe:	91 1d       	adc	r25, r1
 a00:	96 95       	lsr	r25
 a02:	87 95       	ror	r24
 a04:	97 f9       	bld	r25, 7
 a06:	08 95       	ret

00000a08 <__subsf3>:
 a08:	50 58       	subi	r21, 0x80	; 128

00000a0a <__addsf3>:
 a0a:	bb 27       	eor	r27, r27
 a0c:	aa 27       	eor	r26, r26
 a0e:	0e 94 1c 05 	call	0xa38	; 0xa38 <__addsf3x>
 a12:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_round>
 a16:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_pscA>
 a1a:	38 f0       	brcs	.+14     	; 0xa2a <__addsf3+0x20>
 a1c:	0e 94 df 02 	call	0x5be	; 0x5be <__fp_pscB>
 a20:	20 f0       	brcs	.+8      	; 0xa2a <__addsf3+0x20>
 a22:	39 f4       	brne	.+14     	; 0xa32 <__addsf3+0x28>
 a24:	9f 3f       	cpi	r25, 0xFF	; 255
 a26:	19 f4       	brne	.+6      	; 0xa2e <__addsf3+0x24>
 a28:	26 f4       	brtc	.+8      	; 0xa32 <__addsf3+0x28>
 a2a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_nan>
 a2e:	0e f4       	brtc	.+2      	; 0xa32 <__addsf3+0x28>
 a30:	e0 95       	com	r30
 a32:	e7 fb       	bst	r30, 7
 a34:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_inf>

00000a38 <__addsf3x>:
 a38:	e9 2f       	mov	r30, r25
 a3a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_split3>
 a3e:	58 f3       	brcs	.-42     	; 0xa16 <__addsf3+0xc>
 a40:	ba 17       	cp	r27, r26
 a42:	62 07       	cpc	r22, r18
 a44:	73 07       	cpc	r23, r19
 a46:	84 07       	cpc	r24, r20
 a48:	95 07       	cpc	r25, r21
 a4a:	20 f0       	brcs	.+8      	; 0xa54 <__addsf3x+0x1c>
 a4c:	79 f4       	brne	.+30     	; 0xa6c <__addsf3x+0x34>
 a4e:	a6 f5       	brtc	.+104    	; 0xab8 <__addsf3x+0x80>
 a50:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_zero>
 a54:	0e f4       	brtc	.+2      	; 0xa58 <__addsf3x+0x20>
 a56:	e0 95       	com	r30
 a58:	0b 2e       	mov	r0, r27
 a5a:	ba 2f       	mov	r27, r26
 a5c:	a0 2d       	mov	r26, r0
 a5e:	0b 01       	movw	r0, r22
 a60:	b9 01       	movw	r22, r18
 a62:	90 01       	movw	r18, r0
 a64:	0c 01       	movw	r0, r24
 a66:	ca 01       	movw	r24, r20
 a68:	a0 01       	movw	r20, r0
 a6a:	11 24       	eor	r1, r1
 a6c:	ff 27       	eor	r31, r31
 a6e:	59 1b       	sub	r21, r25
 a70:	99 f0       	breq	.+38     	; 0xa98 <__addsf3x+0x60>
 a72:	59 3f       	cpi	r21, 0xF9	; 249
 a74:	50 f4       	brcc	.+20     	; 0xa8a <__addsf3x+0x52>
 a76:	50 3e       	cpi	r21, 0xE0	; 224
 a78:	68 f1       	brcs	.+90     	; 0xad4 <__addsf3x+0x9c>
 a7a:	1a 16       	cp	r1, r26
 a7c:	f0 40       	sbci	r31, 0x00	; 0
 a7e:	a2 2f       	mov	r26, r18
 a80:	23 2f       	mov	r18, r19
 a82:	34 2f       	mov	r19, r20
 a84:	44 27       	eor	r20, r20
 a86:	58 5f       	subi	r21, 0xF8	; 248
 a88:	f3 cf       	rjmp	.-26     	; 0xa70 <__addsf3x+0x38>
 a8a:	46 95       	lsr	r20
 a8c:	37 95       	ror	r19
 a8e:	27 95       	ror	r18
 a90:	a7 95       	ror	r26
 a92:	f0 40       	sbci	r31, 0x00	; 0
 a94:	53 95       	inc	r21
 a96:	c9 f7       	brne	.-14     	; 0xa8a <__addsf3x+0x52>
 a98:	7e f4       	brtc	.+30     	; 0xab8 <__addsf3x+0x80>
 a9a:	1f 16       	cp	r1, r31
 a9c:	ba 0b       	sbc	r27, r26
 a9e:	62 0b       	sbc	r22, r18
 aa0:	73 0b       	sbc	r23, r19
 aa2:	84 0b       	sbc	r24, r20
 aa4:	ba f0       	brmi	.+46     	; 0xad4 <__addsf3x+0x9c>
 aa6:	91 50       	subi	r25, 0x01	; 1
 aa8:	a1 f0       	breq	.+40     	; 0xad2 <__addsf3x+0x9a>
 aaa:	ff 0f       	add	r31, r31
 aac:	bb 1f       	adc	r27, r27
 aae:	66 1f       	adc	r22, r22
 ab0:	77 1f       	adc	r23, r23
 ab2:	88 1f       	adc	r24, r24
 ab4:	c2 f7       	brpl	.-16     	; 0xaa6 <__addsf3x+0x6e>
 ab6:	0e c0       	rjmp	.+28     	; 0xad4 <__addsf3x+0x9c>
 ab8:	ba 0f       	add	r27, r26
 aba:	62 1f       	adc	r22, r18
 abc:	73 1f       	adc	r23, r19
 abe:	84 1f       	adc	r24, r20
 ac0:	48 f4       	brcc	.+18     	; 0xad4 <__addsf3x+0x9c>
 ac2:	87 95       	ror	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	b7 95       	ror	r27
 aca:	f7 95       	ror	r31
 acc:	9e 3f       	cpi	r25, 0xFE	; 254
 ace:	08 f0       	brcs	.+2      	; 0xad2 <__addsf3x+0x9a>
 ad0:	b0 cf       	rjmp	.-160    	; 0xa32 <__addsf3+0x28>
 ad2:	93 95       	inc	r25
 ad4:	88 0f       	add	r24, r24
 ad6:	08 f0       	brcs	.+2      	; 0xada <__addsf3x+0xa2>
 ad8:	99 27       	eor	r25, r25
 ada:	ee 0f       	add	r30, r30
 adc:	97 95       	ror	r25
 ade:	87 95       	ror	r24
 ae0:	08 95       	ret

00000ae2 <__fp_mpack>:
 ae2:	9f 3f       	cpi	r25, 0xFF	; 255
 ae4:	31 f0       	breq	.+12     	; 0xaf2 <__fp_mpack_finite+0xc>

00000ae6 <__fp_mpack_finite>:
 ae6:	91 50       	subi	r25, 0x01	; 1
 ae8:	20 f4       	brcc	.+8      	; 0xaf2 <__fp_mpack_finite+0xc>
 aea:	87 95       	ror	r24
 aec:	77 95       	ror	r23
 aee:	67 95       	ror	r22
 af0:	b7 95       	ror	r27
 af2:	88 0f       	add	r24, r24
 af4:	91 1d       	adc	r25, r1
 af6:	96 95       	lsr	r25
 af8:	87 95       	ror	r24
 afa:	97 f9       	bld	r25, 7
 afc:	08 95       	ret

00000afe <__udivmodqi4>:
 afe:	99 1b       	sub	r25, r25
 b00:	79 e0       	ldi	r23, 0x09	; 9
 b02:	04 c0       	rjmp	.+8      	; 0xb0c <__udivmodqi4_ep>

00000b04 <__udivmodqi4_loop>:
 b04:	99 1f       	adc	r25, r25
 b06:	96 17       	cp	r25, r22
 b08:	08 f0       	brcs	.+2      	; 0xb0c <__udivmodqi4_ep>
 b0a:	96 1b       	sub	r25, r22

00000b0c <__udivmodqi4_ep>:
 b0c:	88 1f       	adc	r24, r24
 b0e:	7a 95       	dec	r23
 b10:	c9 f7       	brne	.-14     	; 0xb04 <__udivmodqi4_loop>
 b12:	80 95       	com	r24
 b14:	08 95       	ret

00000b16 <_exit>:
 b16:	f8 94       	cli

00000b18 <__stop_program>:
 b18:	ff cf       	rjmp	.-2      	; 0xb18 <__stop_program>
