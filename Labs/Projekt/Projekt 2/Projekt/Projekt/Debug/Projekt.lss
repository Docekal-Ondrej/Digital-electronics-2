
Projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000946  000009da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000946  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800142  00800142  00000a1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000155a  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a77  00000000  00000000  000020ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f5  00000000  00000000  00002b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  0000345c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c3  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000084d  00000000  00000000  00003c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  9e:	0c 94 a1 04 	jmp	0x942	; 0x942 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_input_pullup>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	80 81       	ld	r24, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_input_pullup+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_input_pullup+0xa>
  b8:	92 2f       	mov	r25, r18
  ba:	90 95       	com	r25
  bc:	89 23       	and	r24, r25
  be:	80 83       	st	Z, r24
  c0:	81 81       	ldd	r24, Z+1	; 0x01
  c2:	28 2b       	or	r18, r24
  c4:	21 83       	std	Z+1, r18	; 0x01
  c6:	08 95       	ret

000000c8 <GPIO_write_low>:
  c8:	fc 01       	movw	r30, r24
  ca:	90 81       	ld	r25, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_low+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_low+0xa>
  da:	20 95       	com	r18
  dc:	29 23       	and	r18, r25
  de:	20 83       	st	Z, r18
  e0:	08 95       	ret

000000e2 <GPIO_read>:
    }
        else
    { 
        return(1);
    }*/
    return(*reg_name & (1<<pin_num));
  e2:	fc 01       	movw	r30, r24
  e4:	20 81       	ld	r18, Z
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_read+0xe>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_read+0xa>
  f4:	82 23       	and	r24, r18
  f6:	08 95       	ret

000000f8 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	85 e0       	ldi	r24, 0x05	; 5
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <toggle_e+0x8>
 104:	00 00       	nop
 106:	85 b1       	in	r24, 0x05	; 5
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	08 95       	ret

0000010e <lcd_write>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	66 23       	and	r22, r22
 114:	21 f0       	breq	.+8      	; 0x11e <lcd_write+0x10>
 116:	85 b1       	in	r24, 0x05	; 5
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	03 c0       	rjmp	.+6      	; 0x124 <lcd_write+0x16>
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	85 b9       	out	0x05, r24	; 5
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8a b9       	out	0x0a, r24	; 10
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	80 64       	ori	r24, 0x40	; 64
 134:	8a b9       	out	0x0a, r24	; 10
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8a b9       	out	0x0a, r24	; 10
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	8f 77       	andi	r24, 0x7F	; 127
 140:	8b b9       	out	0x0b, r24	; 11
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8f 7b       	andi	r24, 0xBF	; 191
 146:	8b b9       	out	0x0b, r24	; 11
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 7d       	andi	r24, 0xDF	; 223
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8f 7e       	andi	r24, 0xEF	; 239
 152:	8b b9       	out	0x0b, r24	; 11
 154:	cc 23       	and	r28, r28
 156:	1c f4       	brge	.+6      	; 0x15e <lcd_write+0x50>
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	c6 ff       	sbrs	r28, 6
 160:	03 c0       	rjmp	.+6      	; 0x168 <lcd_write+0x5a>
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 64       	ori	r24, 0x40	; 64
 166:	8b b9       	out	0x0b, r24	; 11
 168:	c5 ff       	sbrs	r28, 5
 16a:	03 c0       	rjmp	.+6      	; 0x172 <lcd_write+0x64>
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	8b b9       	out	0x0b, r24	; 11
 172:	c4 ff       	sbrs	r28, 4
 174:	03 c0       	rjmp	.+6      	; 0x17c <lcd_write+0x6e>
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	8f 77       	andi	r24, 0x7F	; 127
 184:	8b b9       	out	0x0b, r24	; 11
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 7b       	andi	r24, 0xBF	; 191
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 7d       	andi	r24, 0xDF	; 223
 190:	8b b9       	out	0x0b, r24	; 11
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8f 7e       	andi	r24, 0xEF	; 239
 196:	8b b9       	out	0x0b, r24	; 11
 198:	c3 ff       	sbrs	r28, 3
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <lcd_write+0x94>
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	8b b9       	out	0x0b, r24	; 11
 1a2:	c2 ff       	sbrs	r28, 2
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <lcd_write+0x9e>
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	c1 ff       	sbrs	r28, 1
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <lcd_write+0xa8>
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	8b b9       	out	0x0b, r24	; 11
 1b6:	c0 ff       	sbrs	r28, 0
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <lcd_write+0xb2>
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	8b b9       	out	0x0b, r24	; 11
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	87 eb       	ldi	r24, 0xB7	; 183
 1de:	9b e0       	ldi	r25, 0x0B	; 11
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_write+0xd2>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_write+0xd8>
 1e6:	00 00       	nop
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_command>:
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_write>
 1f2:	08 95       	ret

000001f4 <lcd_gotoxy>:
 1f4:	61 11       	cpse	r22, r1
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <lcd_gotoxy+0xc>
 1f8:	80 58       	subi	r24, 0x80	; 128
 1fa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 1fe:	08 95       	ret
 200:	80 54       	subi	r24, 0x40	; 64
 202:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 206:	08 95       	ret

00000208 <lcd_clrscr>:
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 20e:	08 95       	ret

00000210 <lcd_putc>:
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_write>
 216:	08 95       	ret

00000218 <lcd_puts>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	fc 01       	movw	r30, r24
 21e:	03 c0       	rjmp	.+6      	; 0x226 <lcd_puts+0xe>
 220:	0e 94 08 01 	call	0x210	; 0x210 <lcd_putc>
 224:	fe 01       	movw	r30, r28
 226:	ef 01       	movw	r28, r30
 228:	21 96       	adiw	r28, 0x01	; 1
 22a:	80 81       	ld	r24, Z
 22c:	81 11       	cpse	r24, r1
 22e:	f8 cf       	rjmp	.-16     	; 0x220 <lcd_puts+0x8>
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 240:	8a b1       	in	r24, 0x0a	; 10
 242:	80 62       	ori	r24, 0x20	; 32
 244:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 246:	84 b1       	in	r24, 0x04	; 4
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 24c:	8a b1       	in	r24, 0x0a	; 10
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 252:	8a b1       	in	r24, 0x0a	; 10
 254:	80 62       	ori	r24, 0x20	; 32
 256:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 25e:	8a b1       	in	r24, 0x0a	; 10
 260:	80 68       	ori	r24, 0x80	; 128
 262:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	99 ef       	ldi	r25, 0xF9	; 249
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x32>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x38>
 26e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	80 62       	ori	r24, 0x20	; 32
 274:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	80 61       	ori	r24, 0x10	; 16
 27a:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 27c:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x4e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_init+0x54>
 28a:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 28c:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <lcd_init+0x5e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_init+0x64>
 29a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 29c:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x6e>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_init+0x74>
 2aa:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	8f 7e       	andi	r24, 0xEF	; 239
 2b0:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x84>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_init+0x8a>
 2c0:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2c8:	88 e0       	ldi	r24, 0x08	; 8
 2ca:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2ce:	0e 94 04 01 	call	0x208	; 0x208 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2d8:	8c 2f       	mov	r24, r28
 2da:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
}/* lcd_init */
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <readADC>:

/* Functions ---------------------------------------------------------*/
//defining ADC-read function
uint16_t readADC (uint8_t channel)
{
    ADMUX = (0xf0 & ADMUX) | channel;	//Set input channel to read
 2e2:	ec e7       	ldi	r30, 0x7C	; 124
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	90 81       	ld	r25, Z
 2e8:	90 7f       	andi	r25, 0xF0	; 240
 2ea:	89 2b       	or	r24, r25
 2ec:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);	//Start an ADC conversion by setting ADSC bit
 2ee:	ea e7       	ldi	r30, 0x7A	; 122
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	80 83       	st	Z, r24
    loop_until_bit_is_clear(ADCSRA, ADSC);	//wait until AD convertion is finished
 2f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2fc:	86 fd       	sbrc	r24, 6
 2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <readADC+0x16>
    return (ADC);
 300:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 304:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 308:	08 95       	ret

0000030a <main>:
   	//DDRB |= ~(1 << SW);  // Arduino PIN5
   	//PORTB |= (1 << SW);
   	
   	//PWM is set to non-inverting mode
   	//Setting Fast PWM mode 14: set WGM11, WGM12, WGM13 to 1, set prescaler to 8
   	TCCR1A |= (1 << WGM11) | (1 << COM1A1);
 30a:	e0 e8       	ldi	r30, 0x80	; 128
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	82 68       	ori	r24, 0x82	; 130
 312:	80 83       	st	Z, r24
   	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11);
 314:	e1 e8       	ldi	r30, 0x81	; 129
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	8a 61       	ori	r24, 0x1A	; 26
 31c:	80 83       	st	Z, r24

   	ICR1 = 19999;	//Set ICR1 register: PWM period
 31e:	8f e1       	ldi	r24, 0x1F	; 31
 320:	9e e4       	ldi	r25, 0x4E	; 78
 322:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 326:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
   	
   	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
 32a:	ec e7       	ldi	r30, 0x7C	; 124
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	80 64       	ori	r24, 0x40	; 64
 332:	80 83       	st	Z, r24
   	ADCSRA |= (1 << ADPS1) | (1 << ADPS0); //ADC clock prescaler to 8
 334:	ea e7       	ldi	r30, 0x7A	; 122
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	83 60       	ori	r24, 0x03	; 3
 33c:	80 83       	st	Z, r24
   	ADCSRA |= (1 << ADEN); //enables the ADC
 33e:	80 81       	ld	r24, Z
 340:	80 68       	ori	r24, 0x80	; 128
 342:	80 83       	st	Z, r24
	
	// Configure buttons
	GPIO_config_input_pullup(&DDRC, BTN);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	87 e2       	ldi	r24, 0x27	; 39
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_input_pullup>
	GPIO_write_low(&PORTC, BTN);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_low>
    
	// Initialize LCD display	
	lcd_init(LCD_DISP_ON);
 358:	8c e0       	ldi	r24, 0x0C	; 12
 35a:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_init>
	
	lcd_gotoxy(0, 0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
	lcd_puts("Weather ");
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
	lcd_gotoxy(8, 0);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	88 e0       	ldi	r24, 0x08	; 8
 372:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
	lcd_puts("station ");
 376:	89 e0       	ldi	r24, 0x09	; 9
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>

	
    // Configure 8-bit Timer/Counter2
	TIM2_overflow_128us();
 37e:	e1 eb       	ldi	r30, 0xB1	; 177
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	8a 7f       	andi	r24, 0xFA	; 250
 386:	80 83       	st	Z, r24
 388:	80 81       	ld	r24, Z
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 38e:	e0 e7       	ldi	r30, 0x70	; 112
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	81 60       	ori	r24, 0x01	; 1
 396:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 398:	78 94       	sei

    // Infinite loop
    while (1)
    {
		if(!GPIO_read(&PINB,SW)) //hold the SW bu
 39a:	65 e0       	ldi	r22, 0x05	; 5
 39c:	83 e2       	ldi	r24, 0x23	; 35
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_read>
 3a4:	81 11       	cpse	r24, r1
 3a6:	1a c0       	rjmp	.+52     	; 0x3dc <main+0xd2>
		{
            lcd_gotoxy(1, 1);
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
            lcd_puts("MANUAL");
 3b0:	82 e1       	ldi	r24, 0x12	; 18
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    		OCR2A = (readADC(ADC2D)*5); //reading analog value from A_pin A1
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <readADC>
 3be:	98 2f       	mov	r25, r24
 3c0:	99 0f       	add	r25, r25
 3c2:	99 0f       	add	r25, r25
 3c4:	89 0f       	add	r24, r25
 3c6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    		
    	    OCR2B = (readADC(ADC3D)*5); //reading analog value from A_pin A2
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <readADC>
 3d0:	98 2f       	mov	r25, r24
 3d2:	99 0f       	add	r25, r25
 3d4:	99 0f       	add	r25, r25
 3d6:	89 0f       	add	r24, r25
 3d8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		}
		if(GPIO_read(&PINB,SW))
 3dc:	65 e0       	ldi	r22, 0x05	; 5
 3de:	83 e2       	ldi	r24, 0x23	; 35
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_read>
 3e6:	88 23       	and	r24, r24
 3e8:	c1 f2       	breq	.-80     	; 0x39a <main+0x90>
		{
            lcd_gotoxy(1, 1);
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
            lcd_puts("AUTO");
 3f2:	89 e1       	ldi	r24, 0x19	; 25
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
    		ADCSRA |= (1 << ADSC); //start ADC conversion
 3fa:	ea e7       	ldi	r30, 0x7A	; 122
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	80 64       	ori	r24, 0x40	; 64
 402:	80 83       	st	Z, r24
    		loop_until_bit_is_clear(ADCSRA, ADSC); //wait until ADC conversion is done
 404:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 408:	86 fd       	sbrc	r24, 6
 40a:	fc cf       	rjmp	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
    		photoresistorValue = ADC1D; //read ADC value from photo-resistor
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <photoresistorValue+0x1>
 414:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <photoresistorValue>
    		
    		OCR2A = 500 + photoresistorValue*5.5;  //Servo reads values from photo-resistor,where 500 is 0 deg
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

    		OCR2B = 500 + photoresistorValue*5.5;
 41e:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <photoresistorValue>
 422:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <photoresistorValue+0x1>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__floatunsisf>
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	40 eb       	ldi	r20, 0xB0	; 176
 434:	50 e4       	ldi	r21, 0x40	; 64
 436:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__mulsf3>
 43a:	20 e0       	ldi	r18, 0x00	; 0
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	4a ef       	ldi	r20, 0xFA	; 250
 440:	53 e4       	ldi	r21, 0x43	; 67
 442:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__addsf3>
 446:	0e 94 42 03 	call	0x684	; 0x684 <__fixunssfsi>
 44a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 44e:	a5 cf       	rjmp	.-182    	; 0x39a <main+0x90>

00000450 <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	2f 93       	push	r18
 45c:	3f 93       	push	r19
 45e:	4f 93       	push	r20
 460:	5f 93       	push	r21
 462:	6f 93       	push	r22
 464:	7f 93       	push	r23
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	af 93       	push	r26
 46c:	bf 93       	push	r27
 46e:	ef 93       	push	r30
 470:	ff 93       	push	r31
	static uint8_t tempLSB;
	static uint16_t temp;
	static uint8_t hum;
	static uint8_t press;
	static lcd_string[3];
	if(counter <= 250){
 472:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <counter.2124>
 476:	8b 3f       	cpi	r24, 0xFB	; 251
 478:	20 f4       	brcc	.+8      	; 0x482 <__vector_9+0x32>
		counter++;
 47a:	8f 5f       	subi	r24, 0xFF	; 255
 47c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <counter.2124>
 480:	02 c0       	rjmp	.+4      	; 0x486 <__vector_9+0x36>
	}
	else{
		
		counter = 0;
 482:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <counter.2124>
	}
	
	if(!GPIO_read(&PINC, BTN)){
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	86 e2       	ldi	r24, 0x26	; 38
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_read>
 490:	81 11       	cpse	r24, r1
 492:	0d c0       	rjmp	.+26     	; 0x4ae <__vector_9+0x5e>
		if(btnpressed == 0){
 494:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <btnpressed>
 498:	81 11       	cpse	r24, r1
 49a:	11 c0       	rjmp	.+34     	; 0x4be <__vector_9+0x6e>
			next_state++;
 49c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <next_state>
 4a0:	8f 5f       	subi	r24, 0xFF	; 255
 4a2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <next_state>
			btnpressed = 1;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <btnpressed>
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <__vector_9+0x6e>
		}
	}
	else if(GPIO_read(&PINC, BTN))
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	86 e2       	ldi	r24, 0x26	; 38
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_read>
 4b8:	81 11       	cpse	r24, r1
	{
		btnpressed = 0;
 4ba:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <btnpressed>
	};
	
	switch(state)
 4be:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <state>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	79 f0       	breq	.+30     	; 0x4e4 <__vector_9+0x94>
 4c6:	30 f0       	brcs	.+12     	; 0x4d4 <__vector_9+0x84>
 4c8:	82 30       	cpi	r24, 0x02	; 2
 4ca:	71 f1       	breq	.+92     	; 0x528 <__vector_9+0xd8>
 4cc:	83 30       	cpi	r24, 0x03	; 3
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <__vector_9+0x82>
 4d0:	42 c0       	rjmp	.+132    	; 0x556 <__vector_9+0x106>
 4d2:	5a c0       	rjmp	.+180    	; 0x588 <__vector_9+0x138>
	{
	case STATE_START:
		if(next_state == 1){
 4d4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <next_state>
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	09 f0       	breq	.+2      	; 0x4de <__vector_9+0x8e>
 4dc:	55 c0       	rjmp	.+170    	; 0x588 <__vector_9+0x138>
			state = STATE_TEMP;
 4de:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <state>
 4e2:	52 c0       	rjmp	.+164    	; 0x588 <__vector_9+0x138>
		}
		break;
	case STATE_TEMP:
		if(next_state == 2){
 4e4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <next_state>
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <__vector_9+0xa0>
			state = STATE_HUM;
 4ec:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <state>
		}
		lcd_gotoxy(0, 0);
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts("  TEMP: ");
 4f8:	8e e1       	ldi	r24, 0x1E	; 30
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(7, 0);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	87 e0       	ldi	r24, 0x07	; 7
 504:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 508:	4a e0       	ldi	r20, 0x0A	; 10
 50a:	62 e4       	ldi	r22, 0x42	; 66
 50c:	71 e0       	ldi	r23, 0x01	; 1
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__itoa_ncheck>
		itoa(tempMSB, lcd_string, 10);
		lcd_puts(lcd_string);
 516:	82 e4       	ldi	r24, 0x42	; 66
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(13, 0);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	8d e0       	ldi	r24, 0x0D	; 13
 522:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		//itoa(tempLSB, lcd_string, 10);
		//lcd_puts(lcd_string);
		break;
 526:	30 c0       	rjmp	.+96     	; 0x588 <__vector_9+0x138>
	case STATE_HUM:
		if(next_state == 3){
 528:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <next_state>
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	11 f4       	brne	.+4      	; 0x534 <__vector_9+0xe4>
			state = STATE_PRES;
 530:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <state>
		}
		lcd_gotoxy(0, 0);
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts("   HUM: ");
 53c:	87 e2       	ldi	r24, 0x27	; 39
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(8, 0);
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	88 e0       	ldi	r24, 0x08	; 8
 548:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts("value  ");
 54c:	80 e3       	ldi	r24, 0x30	; 48
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		break;
 554:	19 c0       	rjmp	.+50     	; 0x588 <__vector_9+0x138>
	case STATE_PRES:
		if(next_state > 3){
 556:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <next_state>
 55a:	84 30       	cpi	r24, 0x04	; 4
 55c:	28 f0       	brcs	.+10     	; 0x568 <__vector_9+0x118>
			state = STATE_TEMP;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <state>
			next_state = 1;
 564:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <next_state>
		}
		lcd_gotoxy(0, 0);
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts(" PRESS: ");
 570:	88 e3       	ldi	r24, 0x38	; 56
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(8, 0);
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	88 e0       	ldi	r24, 0x08	; 8
 57c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts("value  ");
 580:	80 e3       	ldi	r24, 0x30	; 48
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		break;
	}	

 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <__subsf3>:
 5aa:	50 58       	subi	r21, 0x80	; 128

000005ac <__addsf3>:
 5ac:	bb 27       	eor	r27, r27
 5ae:	aa 27       	eor	r26, r26
 5b0:	0e 94 ed 02 	call	0x5da	; 0x5da <__addsf3x>
 5b4:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_round>
 5b8:	0e 94 b7 03 	call	0x76e	; 0x76e <__fp_pscA>
 5bc:	38 f0       	brcs	.+14     	; 0x5cc <__addsf3+0x20>
 5be:	0e 94 be 03 	call	0x77c	; 0x77c <__fp_pscB>
 5c2:	20 f0       	brcs	.+8      	; 0x5cc <__addsf3+0x20>
 5c4:	39 f4       	brne	.+14     	; 0x5d4 <__addsf3+0x28>
 5c6:	9f 3f       	cpi	r25, 0xFF	; 255
 5c8:	19 f4       	brne	.+6      	; 0x5d0 <__addsf3+0x24>
 5ca:	26 f4       	brtc	.+8      	; 0x5d4 <__addsf3+0x28>
 5cc:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_nan>
 5d0:	0e f4       	brtc	.+2      	; 0x5d4 <__addsf3+0x28>
 5d2:	e0 95       	com	r30
 5d4:	e7 fb       	bst	r30, 7
 5d6:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__fp_inf>

000005da <__addsf3x>:
 5da:	e9 2f       	mov	r30, r25
 5dc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_split3>
 5e0:	58 f3       	brcs	.-42     	; 0x5b8 <__addsf3+0xc>
 5e2:	ba 17       	cp	r27, r26
 5e4:	62 07       	cpc	r22, r18
 5e6:	73 07       	cpc	r23, r19
 5e8:	84 07       	cpc	r24, r20
 5ea:	95 07       	cpc	r25, r21
 5ec:	20 f0       	brcs	.+8      	; 0x5f6 <__addsf3x+0x1c>
 5ee:	79 f4       	brne	.+30     	; 0x60e <__addsf3x+0x34>
 5f0:	a6 f5       	brtc	.+104    	; 0x65a <__addsf3x+0x80>
 5f2:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_zero>
 5f6:	0e f4       	brtc	.+2      	; 0x5fa <__addsf3x+0x20>
 5f8:	e0 95       	com	r30
 5fa:	0b 2e       	mov	r0, r27
 5fc:	ba 2f       	mov	r27, r26
 5fe:	a0 2d       	mov	r26, r0
 600:	0b 01       	movw	r0, r22
 602:	b9 01       	movw	r22, r18
 604:	90 01       	movw	r18, r0
 606:	0c 01       	movw	r0, r24
 608:	ca 01       	movw	r24, r20
 60a:	a0 01       	movw	r20, r0
 60c:	11 24       	eor	r1, r1
 60e:	ff 27       	eor	r31, r31
 610:	59 1b       	sub	r21, r25
 612:	99 f0       	breq	.+38     	; 0x63a <__addsf3x+0x60>
 614:	59 3f       	cpi	r21, 0xF9	; 249
 616:	50 f4       	brcc	.+20     	; 0x62c <__addsf3x+0x52>
 618:	50 3e       	cpi	r21, 0xE0	; 224
 61a:	68 f1       	brcs	.+90     	; 0x676 <__addsf3x+0x9c>
 61c:	1a 16       	cp	r1, r26
 61e:	f0 40       	sbci	r31, 0x00	; 0
 620:	a2 2f       	mov	r26, r18
 622:	23 2f       	mov	r18, r19
 624:	34 2f       	mov	r19, r20
 626:	44 27       	eor	r20, r20
 628:	58 5f       	subi	r21, 0xF8	; 248
 62a:	f3 cf       	rjmp	.-26     	; 0x612 <__addsf3x+0x38>
 62c:	46 95       	lsr	r20
 62e:	37 95       	ror	r19
 630:	27 95       	ror	r18
 632:	a7 95       	ror	r26
 634:	f0 40       	sbci	r31, 0x00	; 0
 636:	53 95       	inc	r21
 638:	c9 f7       	brne	.-14     	; 0x62c <__addsf3x+0x52>
 63a:	7e f4       	brtc	.+30     	; 0x65a <__addsf3x+0x80>
 63c:	1f 16       	cp	r1, r31
 63e:	ba 0b       	sbc	r27, r26
 640:	62 0b       	sbc	r22, r18
 642:	73 0b       	sbc	r23, r19
 644:	84 0b       	sbc	r24, r20
 646:	ba f0       	brmi	.+46     	; 0x676 <__addsf3x+0x9c>
 648:	91 50       	subi	r25, 0x01	; 1
 64a:	a1 f0       	breq	.+40     	; 0x674 <__addsf3x+0x9a>
 64c:	ff 0f       	add	r31, r31
 64e:	bb 1f       	adc	r27, r27
 650:	66 1f       	adc	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	c2 f7       	brpl	.-16     	; 0x648 <__addsf3x+0x6e>
 658:	0e c0       	rjmp	.+28     	; 0x676 <__addsf3x+0x9c>
 65a:	ba 0f       	add	r27, r26
 65c:	62 1f       	adc	r22, r18
 65e:	73 1f       	adc	r23, r19
 660:	84 1f       	adc	r24, r20
 662:	48 f4       	brcc	.+18     	; 0x676 <__addsf3x+0x9c>
 664:	87 95       	ror	r24
 666:	77 95       	ror	r23
 668:	67 95       	ror	r22
 66a:	b7 95       	ror	r27
 66c:	f7 95       	ror	r31
 66e:	9e 3f       	cpi	r25, 0xFE	; 254
 670:	08 f0       	brcs	.+2      	; 0x674 <__addsf3x+0x9a>
 672:	b0 cf       	rjmp	.-160    	; 0x5d4 <__addsf3+0x28>
 674:	93 95       	inc	r25
 676:	88 0f       	add	r24, r24
 678:	08 f0       	brcs	.+2      	; 0x67c <__addsf3x+0xa2>
 67a:	99 27       	eor	r25, r25
 67c:	ee 0f       	add	r30, r30
 67e:	97 95       	ror	r25
 680:	87 95       	ror	r24
 682:	08 95       	ret

00000684 <__fixunssfsi>:
 684:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_splitA>
 688:	88 f0       	brcs	.+34     	; 0x6ac <__fixunssfsi+0x28>
 68a:	9f 57       	subi	r25, 0x7F	; 127
 68c:	98 f0       	brcs	.+38     	; 0x6b4 <__fixunssfsi+0x30>
 68e:	b9 2f       	mov	r27, r25
 690:	99 27       	eor	r25, r25
 692:	b7 51       	subi	r27, 0x17	; 23
 694:	b0 f0       	brcs	.+44     	; 0x6c2 <__fixunssfsi+0x3e>
 696:	e1 f0       	breq	.+56     	; 0x6d0 <__fixunssfsi+0x4c>
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	1a f0       	brmi	.+6      	; 0x6a8 <__fixunssfsi+0x24>
 6a2:	ba 95       	dec	r27
 6a4:	c9 f7       	brne	.-14     	; 0x698 <__fixunssfsi+0x14>
 6a6:	14 c0       	rjmp	.+40     	; 0x6d0 <__fixunssfsi+0x4c>
 6a8:	b1 30       	cpi	r27, 0x01	; 1
 6aa:	91 f0       	breq	.+36     	; 0x6d0 <__fixunssfsi+0x4c>
 6ac:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__fp_zero>
 6b0:	b1 e0       	ldi	r27, 0x01	; 1
 6b2:	08 95       	ret
 6b4:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_zero>
 6b8:	67 2f       	mov	r22, r23
 6ba:	78 2f       	mov	r23, r24
 6bc:	88 27       	eor	r24, r24
 6be:	b8 5f       	subi	r27, 0xF8	; 248
 6c0:	39 f0       	breq	.+14     	; 0x6d0 <__fixunssfsi+0x4c>
 6c2:	b9 3f       	cpi	r27, 0xF9	; 249
 6c4:	cc f3       	brlt	.-14     	; 0x6b8 <__fixunssfsi+0x34>
 6c6:	86 95       	lsr	r24
 6c8:	77 95       	ror	r23
 6ca:	67 95       	ror	r22
 6cc:	b3 95       	inc	r27
 6ce:	d9 f7       	brne	.-10     	; 0x6c6 <__fixunssfsi+0x42>
 6d0:	3e f4       	brtc	.+14     	; 0x6e0 <__fixunssfsi+0x5c>
 6d2:	90 95       	com	r25
 6d4:	80 95       	com	r24
 6d6:	70 95       	com	r23
 6d8:	61 95       	neg	r22
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	8f 4f       	sbci	r24, 0xFF	; 255
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	08 95       	ret

000006e2 <__floatunsisf>:
 6e2:	e8 94       	clt
 6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <__floatsisf+0x12>

000006e6 <__floatsisf>:
 6e6:	97 fb       	bst	r25, 7
 6e8:	3e f4       	brtc	.+14     	; 0x6f8 <__floatsisf+0x12>
 6ea:	90 95       	com	r25
 6ec:	80 95       	com	r24
 6ee:	70 95       	com	r23
 6f0:	61 95       	neg	r22
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	8f 4f       	sbci	r24, 0xFF	; 255
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	99 23       	and	r25, r25
 6fa:	a9 f0       	breq	.+42     	; 0x726 <__floatsisf+0x40>
 6fc:	f9 2f       	mov	r31, r25
 6fe:	96 e9       	ldi	r25, 0x96	; 150
 700:	bb 27       	eor	r27, r27
 702:	93 95       	inc	r25
 704:	f6 95       	lsr	r31
 706:	87 95       	ror	r24
 708:	77 95       	ror	r23
 70a:	67 95       	ror	r22
 70c:	b7 95       	ror	r27
 70e:	f1 11       	cpse	r31, r1
 710:	f8 cf       	rjmp	.-16     	; 0x702 <__floatsisf+0x1c>
 712:	fa f4       	brpl	.+62     	; 0x752 <__floatsisf+0x6c>
 714:	bb 0f       	add	r27, r27
 716:	11 f4       	brne	.+4      	; 0x71c <__floatsisf+0x36>
 718:	60 ff       	sbrs	r22, 0
 71a:	1b c0       	rjmp	.+54     	; 0x752 <__floatsisf+0x6c>
 71c:	6f 5f       	subi	r22, 0xFF	; 255
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	8f 4f       	sbci	r24, 0xFF	; 255
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	16 c0       	rjmp	.+44     	; 0x752 <__floatsisf+0x6c>
 726:	88 23       	and	r24, r24
 728:	11 f0       	breq	.+4      	; 0x72e <__floatsisf+0x48>
 72a:	96 e9       	ldi	r25, 0x96	; 150
 72c:	11 c0       	rjmp	.+34     	; 0x750 <__floatsisf+0x6a>
 72e:	77 23       	and	r23, r23
 730:	21 f0       	breq	.+8      	; 0x73a <__floatsisf+0x54>
 732:	9e e8       	ldi	r25, 0x8E	; 142
 734:	87 2f       	mov	r24, r23
 736:	76 2f       	mov	r23, r22
 738:	05 c0       	rjmp	.+10     	; 0x744 <__floatsisf+0x5e>
 73a:	66 23       	and	r22, r22
 73c:	71 f0       	breq	.+28     	; 0x75a <__floatsisf+0x74>
 73e:	96 e8       	ldi	r25, 0x86	; 134
 740:	86 2f       	mov	r24, r22
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	2a f0       	brmi	.+10     	; 0x752 <__floatsisf+0x6c>
 748:	9a 95       	dec	r25
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	88 1f       	adc	r24, r24
 750:	da f7       	brpl	.-10     	; 0x748 <__floatsisf+0x62>
 752:	88 0f       	add	r24, r24
 754:	96 95       	lsr	r25
 756:	87 95       	ror	r24
 758:	97 f9       	bld	r25, 7
 75a:	08 95       	ret

0000075c <__fp_inf>:
 75c:	97 f9       	bld	r25, 7
 75e:	9f 67       	ori	r25, 0x7F	; 127
 760:	80 e8       	ldi	r24, 0x80	; 128
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	08 95       	ret

00000768 <__fp_nan>:
 768:	9f ef       	ldi	r25, 0xFF	; 255
 76a:	80 ec       	ldi	r24, 0xC0	; 192
 76c:	08 95       	ret

0000076e <__fp_pscA>:
 76e:	00 24       	eor	r0, r0
 770:	0a 94       	dec	r0
 772:	16 16       	cp	r1, r22
 774:	17 06       	cpc	r1, r23
 776:	18 06       	cpc	r1, r24
 778:	09 06       	cpc	r0, r25
 77a:	08 95       	ret

0000077c <__fp_pscB>:
 77c:	00 24       	eor	r0, r0
 77e:	0a 94       	dec	r0
 780:	12 16       	cp	r1, r18
 782:	13 06       	cpc	r1, r19
 784:	14 06       	cpc	r1, r20
 786:	05 06       	cpc	r0, r21
 788:	08 95       	ret

0000078a <__fp_round>:
 78a:	09 2e       	mov	r0, r25
 78c:	03 94       	inc	r0
 78e:	00 0c       	add	r0, r0
 790:	11 f4       	brne	.+4      	; 0x796 <__fp_round+0xc>
 792:	88 23       	and	r24, r24
 794:	52 f0       	brmi	.+20     	; 0x7aa <__fp_round+0x20>
 796:	bb 0f       	add	r27, r27
 798:	40 f4       	brcc	.+16     	; 0x7aa <__fp_round+0x20>
 79a:	bf 2b       	or	r27, r31
 79c:	11 f4       	brne	.+4      	; 0x7a2 <__fp_round+0x18>
 79e:	60 ff       	sbrs	r22, 0
 7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fp_round+0x20>
 7a2:	6f 5f       	subi	r22, 0xFF	; 255
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	08 95       	ret

000007ac <__fp_split3>:
 7ac:	57 fd       	sbrc	r21, 7
 7ae:	90 58       	subi	r25, 0x80	; 128
 7b0:	44 0f       	add	r20, r20
 7b2:	55 1f       	adc	r21, r21
 7b4:	59 f0       	breq	.+22     	; 0x7cc <__fp_splitA+0x10>
 7b6:	5f 3f       	cpi	r21, 0xFF	; 255
 7b8:	71 f0       	breq	.+28     	; 0x7d6 <__fp_splitA+0x1a>
 7ba:	47 95       	ror	r20

000007bc <__fp_splitA>:
 7bc:	88 0f       	add	r24, r24
 7be:	97 fb       	bst	r25, 7
 7c0:	99 1f       	adc	r25, r25
 7c2:	61 f0       	breq	.+24     	; 0x7dc <__fp_splitA+0x20>
 7c4:	9f 3f       	cpi	r25, 0xFF	; 255
 7c6:	79 f0       	breq	.+30     	; 0x7e6 <__fp_splitA+0x2a>
 7c8:	87 95       	ror	r24
 7ca:	08 95       	ret
 7cc:	12 16       	cp	r1, r18
 7ce:	13 06       	cpc	r1, r19
 7d0:	14 06       	cpc	r1, r20
 7d2:	55 1f       	adc	r21, r21
 7d4:	f2 cf       	rjmp	.-28     	; 0x7ba <__fp_split3+0xe>
 7d6:	46 95       	lsr	r20
 7d8:	f1 df       	rcall	.-30     	; 0x7bc <__fp_splitA>
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <__fp_splitA+0x30>
 7dc:	16 16       	cp	r1, r22
 7de:	17 06       	cpc	r1, r23
 7e0:	18 06       	cpc	r1, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	f1 cf       	rjmp	.-30     	; 0x7c8 <__fp_splitA+0xc>
 7e6:	86 95       	lsr	r24
 7e8:	71 05       	cpc	r23, r1
 7ea:	61 05       	cpc	r22, r1
 7ec:	08 94       	sec
 7ee:	08 95       	ret

000007f0 <__fp_zero>:
 7f0:	e8 94       	clt

000007f2 <__fp_szero>:
 7f2:	bb 27       	eor	r27, r27
 7f4:	66 27       	eor	r22, r22
 7f6:	77 27       	eor	r23, r23
 7f8:	cb 01       	movw	r24, r22
 7fa:	97 f9       	bld	r25, 7
 7fc:	08 95       	ret

000007fe <__mulsf3>:
 7fe:	0e 94 12 04 	call	0x824	; 0x824 <__mulsf3x>
 802:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_round>
 806:	0e 94 b7 03 	call	0x76e	; 0x76e <__fp_pscA>
 80a:	38 f0       	brcs	.+14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80c:	0e 94 be 03 	call	0x77c	; 0x77c <__fp_pscB>
 810:	20 f0       	brcs	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 812:	95 23       	and	r25, r21
 814:	11 f0       	breq	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__fp_inf>
 81a:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_nan>
 81e:	11 24       	eor	r1, r1
 820:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_szero>

00000824 <__mulsf3x>:
 824:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_split3>
 828:	70 f3       	brcs	.-36     	; 0x806 <__DATA_REGION_LENGTH__+0x6>

0000082a <__mulsf3_pse>:
 82a:	95 9f       	mul	r25, r21
 82c:	c1 f3       	breq	.-16     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 82e:	95 0f       	add	r25, r21
 830:	50 e0       	ldi	r21, 0x00	; 0
 832:	55 1f       	adc	r21, r21
 834:	62 9f       	mul	r22, r18
 836:	f0 01       	movw	r30, r0
 838:	72 9f       	mul	r23, r18
 83a:	bb 27       	eor	r27, r27
 83c:	f0 0d       	add	r31, r0
 83e:	b1 1d       	adc	r27, r1
 840:	63 9f       	mul	r22, r19
 842:	aa 27       	eor	r26, r26
 844:	f0 0d       	add	r31, r0
 846:	b1 1d       	adc	r27, r1
 848:	aa 1f       	adc	r26, r26
 84a:	64 9f       	mul	r22, r20
 84c:	66 27       	eor	r22, r22
 84e:	b0 0d       	add	r27, r0
 850:	a1 1d       	adc	r26, r1
 852:	66 1f       	adc	r22, r22
 854:	82 9f       	mul	r24, r18
 856:	22 27       	eor	r18, r18
 858:	b0 0d       	add	r27, r0
 85a:	a1 1d       	adc	r26, r1
 85c:	62 1f       	adc	r22, r18
 85e:	73 9f       	mul	r23, r19
 860:	b0 0d       	add	r27, r0
 862:	a1 1d       	adc	r26, r1
 864:	62 1f       	adc	r22, r18
 866:	83 9f       	mul	r24, r19
 868:	a0 0d       	add	r26, r0
 86a:	61 1d       	adc	r22, r1
 86c:	22 1f       	adc	r18, r18
 86e:	74 9f       	mul	r23, r20
 870:	33 27       	eor	r19, r19
 872:	a0 0d       	add	r26, r0
 874:	61 1d       	adc	r22, r1
 876:	23 1f       	adc	r18, r19
 878:	84 9f       	mul	r24, r20
 87a:	60 0d       	add	r22, r0
 87c:	21 1d       	adc	r18, r1
 87e:	82 2f       	mov	r24, r18
 880:	76 2f       	mov	r23, r22
 882:	6a 2f       	mov	r22, r26
 884:	11 24       	eor	r1, r1
 886:	9f 57       	subi	r25, 0x7F	; 127
 888:	50 40       	sbci	r21, 0x00	; 0
 88a:	9a f0       	brmi	.+38     	; 0x8b2 <__mulsf3_pse+0x88>
 88c:	f1 f0       	breq	.+60     	; 0x8ca <__mulsf3_pse+0xa0>
 88e:	88 23       	and	r24, r24
 890:	4a f0       	brmi	.+18     	; 0x8a4 <__mulsf3_pse+0x7a>
 892:	ee 0f       	add	r30, r30
 894:	ff 1f       	adc	r31, r31
 896:	bb 1f       	adc	r27, r27
 898:	66 1f       	adc	r22, r22
 89a:	77 1f       	adc	r23, r23
 89c:	88 1f       	adc	r24, r24
 89e:	91 50       	subi	r25, 0x01	; 1
 8a0:	50 40       	sbci	r21, 0x00	; 0
 8a2:	a9 f7       	brne	.-22     	; 0x88e <__mulsf3_pse+0x64>
 8a4:	9e 3f       	cpi	r25, 0xFE	; 254
 8a6:	51 05       	cpc	r21, r1
 8a8:	80 f0       	brcs	.+32     	; 0x8ca <__mulsf3_pse+0xa0>
 8aa:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__fp_inf>
 8ae:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_szero>
 8b2:	5f 3f       	cpi	r21, 0xFF	; 255
 8b4:	e4 f3       	brlt	.-8      	; 0x8ae <__mulsf3_pse+0x84>
 8b6:	98 3e       	cpi	r25, 0xE8	; 232
 8b8:	d4 f3       	brlt	.-12     	; 0x8ae <__mulsf3_pse+0x84>
 8ba:	86 95       	lsr	r24
 8bc:	77 95       	ror	r23
 8be:	67 95       	ror	r22
 8c0:	b7 95       	ror	r27
 8c2:	f7 95       	ror	r31
 8c4:	e7 95       	ror	r30
 8c6:	9f 5f       	subi	r25, 0xFF	; 255
 8c8:	c1 f7       	brne	.-16     	; 0x8ba <__mulsf3_pse+0x90>
 8ca:	fe 2b       	or	r31, r30
 8cc:	88 0f       	add	r24, r24
 8ce:	91 1d       	adc	r25, r1
 8d0:	96 95       	lsr	r25
 8d2:	87 95       	ror	r24
 8d4:	97 f9       	bld	r25, 7
 8d6:	08 95       	ret

000008d8 <__itoa_ncheck>:
 8d8:	bb 27       	eor	r27, r27
 8da:	4a 30       	cpi	r20, 0x0A	; 10
 8dc:	31 f4       	brne	.+12     	; 0x8ea <__itoa_ncheck+0x12>
 8de:	99 23       	and	r25, r25
 8e0:	22 f4       	brpl	.+8      	; 0x8ea <__itoa_ncheck+0x12>
 8e2:	bd e2       	ldi	r27, 0x2D	; 45
 8e4:	90 95       	com	r25
 8e6:	81 95       	neg	r24
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__utoa_common>

000008ee <__utoa_ncheck>:
 8ee:	bb 27       	eor	r27, r27

000008f0 <__utoa_common>:
 8f0:	fb 01       	movw	r30, r22
 8f2:	55 27       	eor	r21, r21
 8f4:	aa 27       	eor	r26, r26
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	aa 1f       	adc	r26, r26
 8fc:	a4 17       	cp	r26, r20
 8fe:	10 f0       	brcs	.+4      	; 0x904 <__stack+0x5>
 900:	a4 1b       	sub	r26, r20
 902:	83 95       	inc	r24
 904:	50 51       	subi	r21, 0x10	; 16
 906:	b9 f7       	brne	.-18     	; 0x8f6 <__utoa_common+0x6>
 908:	a0 5d       	subi	r26, 0xD0	; 208
 90a:	aa 33       	cpi	r26, 0x3A	; 58
 90c:	08 f0       	brcs	.+2      	; 0x910 <__stack+0x11>
 90e:	a9 5d       	subi	r26, 0xD9	; 217
 910:	a1 93       	st	Z+, r26
 912:	00 97       	sbiw	r24, 0x00	; 0
 914:	79 f7       	brne	.-34     	; 0x8f4 <__utoa_common+0x4>
 916:	b1 11       	cpse	r27, r1
 918:	b1 93       	st	Z+, r27
 91a:	11 92       	st	Z+, r1
 91c:	cb 01       	movw	r24, r22
 91e:	0c 94 91 04 	jmp	0x922	; 0x922 <strrev>

00000922 <strrev>:
 922:	dc 01       	movw	r26, r24
 924:	fc 01       	movw	r30, r24
 926:	67 2f       	mov	r22, r23
 928:	71 91       	ld	r23, Z+
 92a:	77 23       	and	r23, r23
 92c:	e1 f7       	brne	.-8      	; 0x926 <strrev+0x4>
 92e:	32 97       	sbiw	r30, 0x02	; 2
 930:	04 c0       	rjmp	.+8      	; 0x93a <strrev+0x18>
 932:	7c 91       	ld	r23, X
 934:	6d 93       	st	X+, r22
 936:	70 83       	st	Z, r23
 938:	62 91       	ld	r22, -Z
 93a:	ae 17       	cp	r26, r30
 93c:	bf 07       	cpc	r27, r31
 93e:	c8 f3       	brcs	.-14     	; 0x932 <strrev+0x10>
 940:	08 95       	ret

00000942 <_exit>:
 942:	f8 94       	cli

00000944 <__stop_program>:
 944:	ff cf       	rjmp	.-2      	; 0x944 <__stop_program>
