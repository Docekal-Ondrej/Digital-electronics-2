
Projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000502  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800136  00800136  000005cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145a  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a59  00000000  00000000  00001b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a5  00000000  00000000  000025ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c3  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082c  00000000  00000000  00003773  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  9e:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_input_pullup>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	80 81       	ld	r24, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_input_pullup+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_input_pullup+0xa>
  b8:	92 2f       	mov	r25, r18
  ba:	90 95       	com	r25
  bc:	89 23       	and	r24, r25
  be:	80 83       	st	Z, r24
  c0:	81 81       	ldd	r24, Z+1	; 0x01
  c2:	28 2b       	or	r18, r24
  c4:	21 83       	std	Z+1, r18	; 0x01
  c6:	08 95       	ret

000000c8 <GPIO_write_low>:
  c8:	fc 01       	movw	r30, r24
  ca:	90 81       	ld	r25, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_low+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_low+0xa>
  da:	20 95       	com	r18
  dc:	29 23       	and	r18, r25
  de:	20 83       	st	Z, r18
  e0:	08 95       	ret

000000e2 <GPIO_read>:
    }
        else
    { 
        return(1);
    }*/
    return(*reg_name & (1<<pin_num));
  e2:	fc 01       	movw	r30, r24
  e4:	20 81       	ld	r18, Z
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_read+0xe>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_read+0xa>
  f4:	82 23       	and	r24, r18
  f6:	08 95       	ret

000000f8 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	85 e0       	ldi	r24, 0x05	; 5
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <toggle_e+0x8>
 104:	00 00       	nop
 106:	85 b1       	in	r24, 0x05	; 5
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	08 95       	ret

0000010e <lcd_write>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	66 23       	and	r22, r22
 114:	21 f0       	breq	.+8      	; 0x11e <lcd_write+0x10>
 116:	85 b1       	in	r24, 0x05	; 5
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	03 c0       	rjmp	.+6      	; 0x124 <lcd_write+0x16>
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	85 b9       	out	0x05, r24	; 5
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8a b9       	out	0x0a, r24	; 10
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	80 64       	ori	r24, 0x40	; 64
 134:	8a b9       	out	0x0a, r24	; 10
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8a b9       	out	0x0a, r24	; 10
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	8f 77       	andi	r24, 0x7F	; 127
 140:	8b b9       	out	0x0b, r24	; 11
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8f 7b       	andi	r24, 0xBF	; 191
 146:	8b b9       	out	0x0b, r24	; 11
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 7d       	andi	r24, 0xDF	; 223
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8f 7e       	andi	r24, 0xEF	; 239
 152:	8b b9       	out	0x0b, r24	; 11
 154:	cc 23       	and	r28, r28
 156:	1c f4       	brge	.+6      	; 0x15e <lcd_write+0x50>
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	c6 ff       	sbrs	r28, 6
 160:	03 c0       	rjmp	.+6      	; 0x168 <lcd_write+0x5a>
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 64       	ori	r24, 0x40	; 64
 166:	8b b9       	out	0x0b, r24	; 11
 168:	c5 ff       	sbrs	r28, 5
 16a:	03 c0       	rjmp	.+6      	; 0x172 <lcd_write+0x64>
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	8b b9       	out	0x0b, r24	; 11
 172:	c4 ff       	sbrs	r28, 4
 174:	03 c0       	rjmp	.+6      	; 0x17c <lcd_write+0x6e>
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	8f 77       	andi	r24, 0x7F	; 127
 184:	8b b9       	out	0x0b, r24	; 11
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 7b       	andi	r24, 0xBF	; 191
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 7d       	andi	r24, 0xDF	; 223
 190:	8b b9       	out	0x0b, r24	; 11
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8f 7e       	andi	r24, 0xEF	; 239
 196:	8b b9       	out	0x0b, r24	; 11
 198:	c3 ff       	sbrs	r28, 3
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <lcd_write+0x94>
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	8b b9       	out	0x0b, r24	; 11
 1a2:	c2 ff       	sbrs	r28, 2
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <lcd_write+0x9e>
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	c1 ff       	sbrs	r28, 1
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <lcd_write+0xa8>
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	8b b9       	out	0x0b, r24	; 11
 1b6:	c0 ff       	sbrs	r28, 0
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <lcd_write+0xb2>
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	8b b9       	out	0x0b, r24	; 11
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	87 eb       	ldi	r24, 0xB7	; 183
 1de:	9b e0       	ldi	r25, 0x0B	; 11
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_write+0xd2>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_write+0xd8>
 1e6:	00 00       	nop
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_command>:
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_write>
 1f2:	08 95       	ret

000001f4 <lcd_gotoxy>:
 1f4:	61 11       	cpse	r22, r1
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <lcd_gotoxy+0xc>
 1f8:	80 58       	subi	r24, 0x80	; 128
 1fa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 1fe:	08 95       	ret
 200:	80 54       	subi	r24, 0x40	; 64
 202:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 206:	08 95       	ret

00000208 <lcd_clrscr>:
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 20e:	08 95       	ret

00000210 <lcd_putc>:
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_write>
 216:	08 95       	ret

00000218 <lcd_puts>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	fc 01       	movw	r30, r24
 21e:	03 c0       	rjmp	.+6      	; 0x226 <lcd_puts+0xe>
 220:	0e 94 08 01 	call	0x210	; 0x210 <lcd_putc>
 224:	fe 01       	movw	r30, r28
 226:	ef 01       	movw	r28, r30
 228:	21 96       	adiw	r28, 0x01	; 1
 22a:	80 81       	ld	r24, Z
 22c:	81 11       	cpse	r24, r1
 22e:	f8 cf       	rjmp	.-16     	; 0x220 <lcd_puts+0x8>
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 240:	8a b1       	in	r24, 0x0a	; 10
 242:	80 62       	ori	r24, 0x20	; 32
 244:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 246:	84 b1       	in	r24, 0x04	; 4
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 24c:	8a b1       	in	r24, 0x0a	; 10
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 252:	8a b1       	in	r24, 0x0a	; 10
 254:	80 62       	ori	r24, 0x20	; 32
 256:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 25e:	8a b1       	in	r24, 0x0a	; 10
 260:	80 68       	ori	r24, 0x80	; 128
 262:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	99 ef       	ldi	r25, 0xF9	; 249
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x32>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x38>
 26e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	80 62       	ori	r24, 0x20	; 32
 274:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	80 61       	ori	r24, 0x10	; 16
 27a:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 27c:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x4e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_init+0x54>
 28a:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 28c:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <lcd_init+0x5e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_init+0x64>
 29a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 29c:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x6e>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_init+0x74>
 2aa:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	8f 7e       	andi	r24, 0xEF	; 239
 2b0:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <toggle_e>
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x84>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_init+0x8a>
 2c0:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2c8:	88 e0       	ldi	r24, 0x08	; 8
 2ca:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2ce:	0e 94 04 01 	call	0x208	; 0x208 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2d8:	8c 2f       	mov	r24, r28
 2da:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
}/* lcd_init */
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <main>:
int main(void)
{
	// Initialize I2C
	
	// Configure buttons
	GPIO_config_input_pullup(&DDRC, BTN);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	87 e2       	ldi	r24, 0x27	; 39
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_input_pullup>
	GPIO_write_low(&PORTC, BTN);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	88 e2       	ldi	r24, 0x28	; 40
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_low>
    
	// Initialize LCD display	
	lcd_init(LCD_DISP_ON);
 2f6:	8c e0       	ldi	r24, 0x0C	; 12
 2f8:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_init>
	
	lcd_gotoxy(0, 0);
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
	lcd_puts("Weather ");
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
	lcd_gotoxy(8, 0);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	88 e0       	ldi	r24, 0x08	; 8
 310:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
	lcd_puts("station ");
 314:	89 e0       	ldi	r24, 0x09	; 9
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>

	
    // Configure 8-bit Timer/Counter2
	TIM2_overflow_128us();
 31c:	e1 eb       	ldi	r30, 0xB1	; 177
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	8a 7f       	andi	r24, 0xFA	; 250
 324:	80 83       	st	Z, r24
 326:	80 81       	ld	r24, Z
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 32c:	e0 e7       	ldi	r30, 0x70	; 112
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	81 60       	ori	r24, 0x01	; 1
 334:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 336:	78 94       	sei
 338:	ff cf       	rjmp	.-2      	; 0x338 <main+0x56>

0000033a <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	2f 93       	push	r18
 346:	3f 93       	push	r19
 348:	4f 93       	push	r20
 34a:	5f 93       	push	r21
 34c:	6f 93       	push	r22
 34e:	7f 93       	push	r23
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
	static uint8_t tempLSB;
	static uint16_t temp;
	static uint8_t hum;
	static uint8_t press;
	static lcd_string[3];
	if(counter <= 250){
 35c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <counter.2089>
 360:	8b 3f       	cpi	r24, 0xFB	; 251
 362:	20 f4       	brcc	.+8      	; 0x36c <__vector_9+0x32>
		counter++;
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <counter.2089>
 36a:	02 c0       	rjmp	.+4      	; 0x370 <__vector_9+0x36>
	}
	else{
		
		counter = 0;
 36c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <counter.2089>
	}
	
	if(!GPIO_read(&PINC, BTN)){
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	86 e2       	ldi	r24, 0x26	; 38
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_read>
 37a:	81 11       	cpse	r24, r1
 37c:	0d c0       	rjmp	.+26     	; 0x398 <__vector_9+0x5e>
		if(btnpressed == 0){
 37e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <btnpressed>
 382:	81 11       	cpse	r24, r1
 384:	11 c0       	rjmp	.+34     	; 0x3a8 <__vector_9+0x6e>
			next_state++;
 386:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <next_state>
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <next_state>
			btnpressed = 1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <btnpressed>
 396:	08 c0       	rjmp	.+16     	; 0x3a8 <__vector_9+0x6e>
		}
	}
	else if(GPIO_read(&PINC, BTN))
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	86 e2       	ldi	r24, 0x26	; 38
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_read>
 3a2:	81 11       	cpse	r24, r1
	{
		btnpressed = 0;
 3a4:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <btnpressed>
	};
	
	switch(state)
 3a8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <state>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	79 f0       	breq	.+30     	; 0x3ce <__vector_9+0x94>
 3b0:	30 f0       	brcs	.+12     	; 0x3be <__vector_9+0x84>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	71 f1       	breq	.+92     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3b6:	83 30       	cpi	r24, 0x03	; 3
 3b8:	09 f4       	brne	.+2      	; 0x3bc <__vector_9+0x82>
 3ba:	42 c0       	rjmp	.+132    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3bc:	5a c0       	rjmp	.+180    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
	{
	case STATE_START:
		if(next_state == 1){
 3be:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <next_state>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <__vector_9+0x8e>
 3c6:	55 c0       	rjmp	.+170    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			state = STATE_TEMP;
 3c8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
 3cc:	52 c0       	rjmp	.+164    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		}
		break;
	case STATE_TEMP:
		if(next_state == 2){
 3ce:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <next_state>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	11 f4       	brne	.+4      	; 0x3da <__vector_9+0xa0>
			state = STATE_HUM;
 3d6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
		}
		lcd_gotoxy(0, 0);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts("  TEMP: ");
 3e2:	82 e1       	ldi	r24, 0x12	; 18
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(7, 0);
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	87 e0       	ldi	r24, 0x07	; 7
 3ee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3f2:	4a e0       	ldi	r20, 0x0A	; 10
 3f4:	66 e3       	ldi	r22, 0x36	; 54
 3f6:	71 e0       	ldi	r23, 0x01	; 1
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 4a 02 	call	0x494	; 0x494 <__itoa_ncheck>
		itoa(tempMSB, lcd_string, 10);
		lcd_puts(lcd_string);
 400:	86 e3       	ldi	r24, 0x36	; 54
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(13, 0);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	8d e0       	ldi	r24, 0x0D	; 13
 40c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		//itoa(tempLSB, lcd_string, 10);
		//lcd_puts(lcd_string);
		break;
 410:	30 c0       	rjmp	.+96     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
	case STATE_HUM:
		if(next_state == 3){
 412:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <next_state>
 416:	83 30       	cpi	r24, 0x03	; 3
 418:	11 f4       	brne	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			state = STATE_PRES;
 41a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
		}
		lcd_gotoxy(0, 0);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts("   HUM: ");
 426:	8b e1       	ldi	r24, 0x1B	; 27
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(8, 0);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	88 e0       	ldi	r24, 0x08	; 8
 432:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts("value  ");
 436:	84 e2       	ldi	r24, 0x24	; 36
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		break;
 43e:	19 c0       	rjmp	.+50     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
	case STATE_PRES:
		if(next_state > 3){
 440:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <next_state>
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	28 f0       	brcs	.+10     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			state = STATE_TEMP;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
			next_state = 1;
 44e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <next_state>
		}
		lcd_gotoxy(0, 0);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts(" PRESS: ");
 45a:	8c e2       	ldi	r24, 0x2C	; 44
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		lcd_gotoxy(8, 0);
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	88 e0       	ldi	r24, 0x08	; 8
 466:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_gotoxy>
		lcd_puts("value  ");
 46a:	84 e2       	ldi	r24, 0x24	; 36
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
		break;
	}	

 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__itoa_ncheck>:
 494:	bb 27       	eor	r27, r27
 496:	4a 30       	cpi	r20, 0x0A	; 10
 498:	31 f4       	brne	.+12     	; 0x4a6 <__itoa_ncheck+0x12>
 49a:	99 23       	and	r25, r25
 49c:	22 f4       	brpl	.+8      	; 0x4a6 <__itoa_ncheck+0x12>
 49e:	bd e2       	ldi	r27, 0x2D	; 45
 4a0:	90 95       	com	r25
 4a2:	81 95       	neg	r24
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__utoa_common>

000004aa <__utoa_ncheck>:
 4aa:	bb 27       	eor	r27, r27

000004ac <__utoa_common>:
 4ac:	fb 01       	movw	r30, r22
 4ae:	55 27       	eor	r21, r21
 4b0:	aa 27       	eor	r26, r26
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	aa 1f       	adc	r26, r26
 4b8:	a4 17       	cp	r26, r20
 4ba:	10 f0       	brcs	.+4      	; 0x4c0 <__utoa_common+0x14>
 4bc:	a4 1b       	sub	r26, r20
 4be:	83 95       	inc	r24
 4c0:	50 51       	subi	r21, 0x10	; 16
 4c2:	b9 f7       	brne	.-18     	; 0x4b2 <__utoa_common+0x6>
 4c4:	a0 5d       	subi	r26, 0xD0	; 208
 4c6:	aa 33       	cpi	r26, 0x3A	; 58
 4c8:	08 f0       	brcs	.+2      	; 0x4cc <__utoa_common+0x20>
 4ca:	a9 5d       	subi	r26, 0xD9	; 217
 4cc:	a1 93       	st	Z+, r26
 4ce:	00 97       	sbiw	r24, 0x00	; 0
 4d0:	79 f7       	brne	.-34     	; 0x4b0 <__utoa_common+0x4>
 4d2:	b1 11       	cpse	r27, r1
 4d4:	b1 93       	st	Z+, r27
 4d6:	11 92       	st	Z+, r1
 4d8:	cb 01       	movw	r24, r22
 4da:	0c 94 6f 02 	jmp	0x4de	; 0x4de <strrev>

000004de <strrev>:
 4de:	dc 01       	movw	r26, r24
 4e0:	fc 01       	movw	r30, r24
 4e2:	67 2f       	mov	r22, r23
 4e4:	71 91       	ld	r23, Z+
 4e6:	77 23       	and	r23, r23
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <strrev+0x4>
 4ea:	32 97       	sbiw	r30, 0x02	; 2
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <strrev+0x18>
 4ee:	7c 91       	ld	r23, X
 4f0:	6d 93       	st	X+, r22
 4f2:	70 83       	st	Z, r23
 4f4:	62 91       	ld	r22, -Z
 4f6:	ae 17       	cp	r26, r30
 4f8:	bf 07       	cpc	r27, r31
 4fa:	c8 f3       	brcs	.-14     	; 0x4ee <strrev+0x10>
 4fc:	08 95       	ret

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
